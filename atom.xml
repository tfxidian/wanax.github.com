<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[陋室]]></title>
  <link href="http://sonnewilling.com/atom.xml" rel="self"/>
  <link href="http://sonnewilling.com/"/>
  <updated>2016-10-19T21:02:20+08:00</updated>
  <id>http://sonnewilling.com/</id>
  <author>
    <name><![CDATA[Wanax]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[React Native入门指南]]></title>
    <link href="http://sonnewilling.com/blog/2016/10/19/react-nativeru-men-zhi-nan/"/>
    <updated>2016-10-19T20:56:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2016/10/19/react-nativeru-men-zhi-nan</id>
    <content type="html"><![CDATA[<h3>一，背景</h3>

<h4>1. 前言</h4>

<p><code>React Native</code>现在的口号是<em>Learn Once,Write Anywhere</em>，让我想起了早些年<code>Jave</code>曾倡导过的<em>Write Once, Run Everywhere</em>，最后虽被人调侃成了<em>Write Once, Debug Everywhere</em>，但不失为一次跨平台开发的早期尝试。</p>

<p>这几年游戏开发中很火的<code>COCOS2D-X</code>，相较看来确实是个成功的案例了。</p>

<p>现在FaceBook要试水App的跨平台开发，推出不到一年的时间已经火遍世界，但最终能走多远，现在下结论还为时过早。</p>

<!--more-->


<h4>2. 起源</h4>

<p>要说<code>React Native</code>得先从<a href="http://reactjs.cn/">ReactJS</a>说起。</p>

<p><code>ReactJS</code>起源于 Facebook 的内部项目，因为该公司对市场上所有 JavaScript MVC 框架，都不满意，就决定自己写一套，用来架设 Instagram 的网站。</p>

<p>由于 React 的设计思想极其独特，属于革命性创新，性能出众，代码逻辑却非常简单。所以，越来越多的人开始关注和使用，认为它可能是将来 Web 开发的主流工具。</p>

<p>这个项目本身也越滚越大，从最早的UI引擎变成了一整套前后端通吃的 Web App 解决方案。衍生的 <code>React Native</code> 项目，目标更是宏伟，希望用写 Web App 的方式去写 Native App。如果能够实现，整个互联网行业都会被颠覆，因为同一组人只需要写一次 UI ，就能同时运行在服务器、浏览器和手机<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h3>二，原理</h3>

<p>最基本的Native与WebView通讯原理我之前的一篇文章讲过，在此不多说了，<code>RN</code>的实现机制也是基于同样的<code>JSBridge</code>规则。</p>

<p><img src="http://sonnewilling.com/images/tec/reactNative/rn01.png" alt="image" /></p>

<p>所不同的是，<code>RN</code>使用<code>JSBridge</code>只是当做一块跳板，最终目的还是调用本地原生API进行UI绘制。</p>

<p>之前与WebView的混合应用需要我们在初始化的时候手动注入方法作为MethodID，在<code>RN</code>中，由于每个模块类都实现了RCTBridgeModule接口，可以通过runtime接口objc_getClassList或objc_copyClassList取出项目里所有类，然后逐个判断是否实现了RCTBridgeModule接口，就可以找到所有模块类<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>。</p>

<p>由此，我们写出来的<code>JS</code>代码就可以通过<code>JSBridge</code>直接调用本地UI控件了。</p>

<p><code>RN</code>的入口函数为：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// Module name
</span><span class='line'>AppRegistry.registerComponent('RNProject', () =&gt; RNApp);</span></code></pre></td></tr></table></div></figure>


<p>写在<code>index.ios.js</code>文件中。</p>

<p>react native自己实现了一个打包方式packger，打包之后，我们的js代码包括react native的js源码都被打包压缩成了一个.jsbundle文件，我们在index.ios.js里面可以写es6的语法，这些都会在打包的时候去编译解析，生成这个jsbundle文件里面的代码是基于commonJS规范的，便于<a href="http://trac.webkit.org/wiki/JavaScriptCore">JavaScriptCore</a>解析。<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>再由Native本地调用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>NSURL *jsCodeLocation = [NSURL URLWithString:@"http://localhost:8081/rn/test.ios.bundle?platform=ios"];
</span><span class='line'>RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation 
</span><span class='line'>                                              moduleName:@"RNProject" 
</span><span class='line'>                                              initialProperties:nil launchOptions:nil];
</span><span class='line'>UIViewController *vc = [[UIViewController alloc] init];
</span><span class='line'>vc.view = rootView;
</span><span class='line'>[self presentViewController:vc animated:YES completion:nil];</span></code></pre></td></tr></table></div></figure>


<p><img src="http://sonnewilling.com/images/tec/reactNative/rn02.png" alt="image" /></p>

<h3>三，Hello World</h3>

<h4>1. 准备知识</h4>

<ul>
<li><a href="https://nodejs.org/zh-cn/">NodeJS</a></li>
</ul>


<blockquote><p>Node.js®是一个基于Chrome V8 引擎的 JavaScript 运行时。 Node.js 使用高效、轻量级的事件驱动、非阻塞 I/O 模型。Node.js 之生态系统是目前最大的开源包管理系统。</p></blockquote>

<ul>
<li><a href="https://zh.wikipedia.org/wiki/Node%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8">npm</a></li>
</ul>


<blockquote><p>Node包管理器（Node Package Manager）。它是一个以javascript编写的软件包管理系统，默认环境为Node.js，从Node.js0.6.3版本开始，npm被自动附带在安装包中。</p></blockquote>

<p>类似于<code>Homebrew</code>之于Mac，<code>npm</code>的使用有时候也受制于<em>墙</em>的限制，它的默认源地址为</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://registry.npm.org</span></code></pre></td></tr></table></div></figure>


<p>可以使用命令查看：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm get registry</span></code></pre></td></tr></table></div></figure>


<p>现在比较流行的国内镜像地址是淘宝提供的，我们可以直接使用命令设置：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm set registry https://registry.npm.taobao.org</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.infoq.com/cn/articles/react-native-solution-dev-environment">React-Native痛点</a>这篇文章的后半部分还提供了一种自己建立<code>npm</code>资源站点的方式，适合团队内部使用。文章前半部分讲解了下<code>RN</code>初始化时内部所做的一些事情，有一定的学习意义。</p>

<h4>2. RN与原生App整合</h4>

<p>这里我们使用<a href="https://cocoapods.org/">CocoaPods</a>的方式进行整合。</p>

<p>整合方式很简单，大体分为三步：</p>

<ol>
<li>使用<code>npm</code>下载<code>RN</code>相关资源文件。</li>
<li>配置<code>podfile</code>，将资源整合。</li>
<li>编写入口文件，进行代码编写。</li>
</ol>


<p>具体细节可参考<a href="https://facebook.github.io/react-native/docs/integration-with-existing-apps.html">官网文档</a>。</p>

<h3>四，开发技能数</h3>

<p><strong>UI</strong></p>

<ul>
<li><p>JS</p>

<p>  <code>RN</code>从0.18开始，默认项目转向ES6。</p></li>
<li><p>JSX</p>

<p>  JSX 是一个看起来很像 XML 的 JavaScript 语法扩展。React 可以用来做简单的 JSX 句法转换。</p></li>
<li><p>StyleSheet</p>

<p>  CSS的一种实现方式</p></li>
</ul>


<p><strong>Net Working</strong></p>

<p><code>RN</code>内置了<code>Ajax</code>网络调用方式，同时也支持其它第三方网络库的使用。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var request = new XMLHttpRequest();
</span><span class='line'>request.onreadystatechange = (e) =&gt; {
</span><span class='line'>  if (request.readyState !== 4) {
</span><span class='line'>    return;
</span><span class='line'>  }
</span><span class='line'>  if (request.status === 200) {
</span><span class='line'>    console.log('success', request.responseText);
</span><span class='line'>  } else {
</span><span class='line'>    console.warn('error');
</span><span class='line'>  }
</span><span class='line'>};
</span><span class='line'>request.open('GET', 'https://mywebsite.com/endpoint/');
</span><span class='line'>request.send();</span></code></pre></td></tr></table></div></figure>


<p><strong>热更新</strong></p>

<p><img src="http://sonnewilling.com/images/tec/reactNative/rn03.png" alt="image" /></p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://www.ruanyifeng.com/blog/2015/03/react.html">React 入门实例教程</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://blog.cnbang.net/tech/2698/">React Native通信机制详解</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="https://www.nihaoshijie.com.cn/index.php/archives/560">React Native IOS集成与原理简析</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS中jsBridge的原理与封装应用]]></title>
    <link href="http://sonnewilling.com/blog/2016/10/19/ioszhong-jsbridgede-yuan-li-yu-feng-zhuang-ying-yong/"/>
    <updated>2016-10-19T20:46:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2016/10/19/ioszhong-jsbridgede-yuan-li-yu-feng-zhuang-ying-yong</id>
    <content type="html"><![CDATA[<h3>一，基本原理</h3>

<p><em>A. Web向Native通信方式：</em></p>

<p>客户端Native内置的webView控件可以看做是一个简易的浏览器，可以使用该控件载入Web页面。当Web页面<code>URL</code>发生变化时会触发webView控件的<code>urlReload</code>函数，并可以拿到变化后的<code>URL</code>路径。若在此<code>URL</code>上附上一些特殊信息，便实现了Web向Native通信。</p>

<p>当前Web中比较流行的做法是在页面内隐式嵌套一个<code>iFrame</code>，通过改变此<code>iFrame</code>的<code>src</code>，达到触发Native<code>urlReload</code>的目的。</p>

<p><em>B. Native向Web通信方式：</em></p>

<p>Native向Web通信的方式比较粗暴，在iOS端，webView内置了直接执行<code>js</code>的方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[_webView stringByEvaluatingJavaScriptFromString:javascriptCommand]</span></code></pre></td></tr></table></div></figure>


<p>一般情况下，我们约定好Web页面<code>js</code>中定义的方法名，则此处便可以直接调用了。</p>

<!--more-->


<h3>二，大致流程：</h3>

<p>Native载入H5页面时通过本地内置的<code>js</code>代码注入一个供H5页面调用的对象<code>WebViewJavascriptBridge</code>，该对象为H5页面提供函数注册方法：<code>registerHandler(handlerName, handler)</code>，以供Native调用：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bridge.registerHandler('testJavascriptHandler', function(data, responseCallback) {
</span><span class='line'>          log('ObjC called testJavascriptHandler with', data)
</span><span class='line'>          var responseData = { 'Javascript Says':'Right back atcha!' }
</span><span class='line'>          log('JS responding with', responseData)
</span><span class='line'>          responseCallback(responseData)
</span><span class='line'>      })</span></code></pre></td></tr></table></div></figure>


<p>同时也提供调用函数：<code>callHandler(handlerName, data, responseCallback)</code>，供H5直接调用Navtive的函数方法：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bridge.callHandler('testObjcCallback', {'foo': 'bar'}, function(response) {
</span><span class='line'>              log('JS got response', response)
</span><span class='line'>          })</span></code></pre></td></tr></table></div></figure>


<p>当H5页面载入完成后，H5页面发送<code>scheme://jsBridge/bridge_loaded</code>，通知Native页面载入完成，则Native注入<code>js</code>对象<code>WebViewJavascriptBridge</code>，供H5注册本地函数与调用Native函数。</p>

<p>两方具体通信流程可参见下图：</p>

<p><img src="http://sonnewilling.com/images/tec/jsbridge/H5%20Call%20Native.png" alt="image" /></p>

<p><img src="http://sonnewilling.com/images/tec/jsbridge/Native%20Call%20H5.png" alt="image" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS图形原理与离屏渲染]]></title>
    <link href="http://sonnewilling.com/blog/2016/10/19/iostu-xing-yuan-li-yu-chi-ping-xuan-ran/"/>
    <updated>2016-10-19T20:28:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2016/10/19/iostu-xing-yuan-li-yu-chi-ping-xuan-ran</id>
    <content type="html"><![CDATA[<p><em>Outline</em>:</p>

<p>一，<a href="#anchor1.0">iOS图形显示基本知识</a></p>

<p>&mdash;&mdash;&mdash; 1.1 <a href="#anchor1.1">图形显示原理</a></p>

<p>&mdash;&mdash;&mdash; 1.2 <a href="#anchor1.2">iOS的显示架构</a></p>

<p>&mdash;&mdash;&mdash; 1.3 <a href="#anchor1.3">iOS图形显示流程</a></p>

<p>&mdash;&mdash;&mdash; 1.4 <a href="#anchor1.4">补充知识</a></p>

<p>&mdash;&mdash;&mdash;&mdash;&mdash; 1.4.1 <a href="#anchor1.4.1">图像多层次的合成&mdash;为何设置透明会增加GPU工作量</a></p>

<p>&mdash;&mdash;&mdash;&mdash;&mdash; 1.4.2 <a href="#anchor1.4.2">图层对其&mdash;为何图片缩放会增加GPU工作量</a></p>

<p>&mdash;&mdash;&mdash;&mdash;&mdash; 1.4.3 <a href="#anchor1.4.3">关于卡顿的简单原理解释</a></p>

<p>二，<a href="#anchor2.0">iOS中离屏渲染相关知识</a></p>

<p>&mdash;&mdash;&mdash; 2.1 <a href="#anchor2.1">什么是离屏渲染</a></p>

<p>&mdash;&mdash;&mdash; 2.2 <a href="#anchor2.2">为什么要谨慎避免离屏渲染</a></p>

<p>&mdash;&mdash;&mdash; 2.3 <a href="#anchor2.3">离屏渲染与光栅化</a></p>

<p>&mdash;&mdash;&mdash; 2.4 <a href="#anchor2.4">一些触发离屏渲染的基本case与替换方式</a></p>

<p>三，<a href="#anchor3.0">iOS的一些显示性能检测方法的简单介绍</a></p>

<p>&mdash;&mdash;&mdash; 3.1 <a href="#anchor3.1">显示性能检测一些小Tip</a></p>

<p>&mdash;&mdash;&mdash; 3.2 <a href="#anchor3.2">Instruments &ndash; Core Animation</a></p>

<p>&mdash;&mdash;&mdash; 3.3 <a href="#anchor3.3">Instruments &ndash; OpenGL ES</a></p>

<p>四，<a href="#anchor4.0">AsyncDisplayKit分享</a></p>

<p>&mdash;&mdash;&mdash; 4.1 <a href="#anchor4.1">AsyncDisplayKit是干什么的</a></p>

<p>&mdash;&mdash;&mdash; 4.2 <a href="#anchor4.2">AsyncDisplayKit的一些性能上的优势</a></p>

<h3><span id="anchor1.0">一，iOS图形显示基本知识</span></h3>

<p>从一个像素点到真正显示在屏幕上，iOS到底在里面做了哪些工作，涉及到哪些Frameworks与Libraries？这是这一章想搞明白的问题。</p>

<!--more-->


<h4>1.1 <span id="anchor1.1">图形显示原理</span></h4>

<p>图像想显示到屏幕上使人肉眼可见都需借助像素的力量。简单地说，每个像素由红，绿，蓝三种颜色组成，它们密集的排布在手机屏幕上，将任何图形通过不同的色值表现出来。</p>

<p>计算机显示的流程大致可以描述为将图像转化为一系列像素点的排列然后打印在屏幕上，由图像转化为像素点的过程又可以称之为<a href="https://www.zhihu.com/question/29163054">光栅化</a>，就是从矢量的点线面的描述，变成像素的描述。</p>

<p><img src="http://sonnewilling.com/images/tec/offscreen/offscreen011.png" width="250" alt="image" /></p>

<p>回溯历史，可以从过去的 CRT 显示器原理说起。CRT 的电子枪按照上面方式，从上到下一行行扫描，扫描完成后显示器就呈现一帧画面，随后电子枪回到初始位置继续下一次扫描。为了把显示器的显示过程和系统的视频控制器进行同步，显示器（或者其他硬件）会用硬件时钟产生一系列的定时信号。当电子枪换到新的一行，准备进行扫描时，显示器会发出一个水平同步信号（horizonal synchronization），简称 HSync；而当一帧画面绘制完成后，电子枪回复到原位，准备画下一帧前，显示器会发出一个垂直同步信号（vertical synchronization），简称 VSync。显示器通常以固定频率进行刷新，这个刷新率就是 VSync 信号产生的频率。尽管现在的设备大都是液晶显示屏了，但原理仍然没有变。<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<p>如在 iPhone5 的上就有1,136×640=727,040个像素，而在15寸Retain的MBP上，这一数字达到15.5百万以上，当你滚动整个屏幕的时候，数以百万计的颜色单元必须以每秒60次的速度刷新，计算量可想而知。</p>

<h4>1.2 <span id="anchor1.2">iOS的显示架构</span></h4>

<p>从软件层面上，iOS借助<code>Core Graohics</code>，<code>Core Animation</code>，<code>Core Image</code>完成图形的处理，它们又都是借助<code>OpenGL ES</code>来完成底层的工作，其结构如下图所示：</p>

<p><img src="http://sonnewilling.com/images/tec/offscreen/arch01.png" width="500" alt="image" /></p>

<p>Display 的上一层便是图形处理单元 GPU，GPU 是一个专门为图形高并发计算而量身定做的处理单元。这也是为什么它能同时更新所有的像素，并呈现到显示器上。它并发的本性让它能高效的将不同纹理合成起来。因为涉及到各种图形矩阵的计算，它跟CPU最直观的区别在于浮点计算能力要超出CPU很多。所以在开发中，<strong>我们应该尽量让CPU负责主线程的UI调动，把图形显示相关的工作交给GPU来处理</strong>，因为涉及到光栅化等一些工作时，CPU也会参与进来，这点在后面再详细描述。</p>

<p><code>GPU Driver</code> 是直接和 GPU 交流的代码块。不同的GPU是不同的性能怪兽，但是驱动使他们在下一个层级上显示的更为统一，典型的下一层级有 OpenGL/OpenGL ES.</p>

<p><code>OpenGL</code>(Open Graphics Library) 是一个提供了 2D 和 3D 图形渲染的 API。GPU 是一块非常特殊的硬件，OpenGL 和 GPU 密切的工作以提高GPU的能力，并实现硬件加速渲染。</p>

<p>OpenGL 之上扩展出很多东西。在 iOS 上，几乎所有的东西都是通过 Core Animation 绘制出来，然而在 OS X 上，绕过 Core Animation 直接使用 Core Graphics 绘制的情况并不少见。<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<p>在硬件层面的调度我们可以看下图所示：</p>

<p><img src="http://sonnewilling.com/images/tec/offscreen/arch03.png" width="500" alt="image" /></p>

<p>计算机系统中 CPU、GPU、显示器是以上面这种方式协同工作的。CPU 计算好显示内容提交到 GPU，GPU 渲染完成后将渲染结果放入帧缓冲区，随后视频控制器会按照 VSync 信号逐行读取帧缓冲区的数据，经过可能的数模转换传递给显示器显示。</p>

<p>在最简单的情况下，帧缓冲区只有一个，这时帧缓冲区的读取和刷新都都会有比较大的效率问题。为了解决效率问题，显示系统通常会引入两个缓冲区，即双缓冲机制。在这种情况下，GPU 会预先渲染好一帧放入一个缓冲区内，让视频控制器读取，当下一帧渲染好后，GPU 会直接把视频控制器的指针指向第二个缓冲器。如此一来效率会有很大的提升。</p>

<h4>1.3 <span id="anchor1.3">iOS图形显示流程</span></h4>

<p>我们可以再从上层看一下iOS中不同的Frameworks和Libraries之间的一些联系：</p>

<p><img src="http://sonnewilling.com/images/tec/offscreen/offscreen06.png" width="500" alt="image" /></p>

<p>在最顶层的就是UIKit，一个在iOS中用来管理用户图形交互的Objc高级的框架，它由一系列的集合类构成，例如UIButton、UILabel，每一个都负责他们指定的UI Control角色。UIKit本身构建在一个叫Core Animation的框架之上。最后一部分是Core Graphics，曾经在Quartz（一个基于CPU的绘制引擎，在OS X系统上初次露脸）中被引入。这两个较为底层的框架都是用C语言编写的。</p>

<p>我们经常说到的硬件加速其实是指OpenGL,Core Animation/UIKit基于GPU之上对计算机图形合成以及绘制的实现，直到目前为止，iOS上的硬件加速能力还是大大领先与android，后者由于依赖CPU的绘制，绝大多数的动画实现都会让人感觉明显的卡顿<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup></p>

<p>CoreAnimation的渲染流程可以用下图来概括:</p>

<p><img src="http://sonnewilling.com/images/tec/offscreen/offscreen07.png" width="500" alt="image" /></p>

<p>在GPU的渲染过程中,我们能看到顶点着色器与像素着色器参与到图像的处理。</p>

<p>在objc.io中有一篇文章进一步地阐明了顶点着色器与像素着色器 (<a href="http://objccn.io/issue-21-7/">GPU 加速下的图像处理</a>)<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></p>

<h4>1.4 <span id="anchor1.4">补充知识</span></h4>

<h5>1.4.1 <span id="anchor1.4.1">图像多层次的合成&mdash;为何设置透明会增加GPU工作量</span><sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></h5>

<p><em>合成 | Blended</em></p>

<p>在图形世界中，合成是一个描述不同位图如何放到一起来创建你最终在屏幕上看到图像的过程。</p>

<p>一个不透明的红色盖在蓝色上那我们看到的就是一个蓝色，但一个半透明的红色盖在蓝色让我们得到的却是一个紫色，这便是合成所要做的工作。</p>

<p>我们可以用下面这个公式来计算每一个像素：</p>

<pre><code>R = S + D * ( 1 – Sa )
</code></pre>

<p>结果的颜色是源色彩(顶端纹理)+目标颜色(低一层的纹理)*(1-源颜色的透明度)。在这个公式中所有的颜色都假定已经预先乘以了他们的透明度。</p>

<p>假定两个纹理都完全不透明，比如 alpha=1.如果目标纹理(低一层的纹理)是蓝色(RGB=0,0,1)，并且源纹理(顶层的纹理)颜色是红色(RGB=1,0,0)，因为 Sa 为1，所以结果为：</p>

<pre><code>R = S
</code></pre>

<p>如果源颜色层为50%的透明，比如 alpha=0.5，既然 alpha 组成部分需要预先乘进 RGB 的值中，那么 S 的 RGB 值为(0.5, 0, 0)，公式看起来便会像这样:</p>

<p><img src="http://sonnewilling.com/images/tec/offscreen/arch04.png" width="800" alt="image" /></p>

<p>所以当源纹理是完全不透明的时候，目标像素就等于源纹理。这可以省下 GPU 很大的工作量</p>

<p>这也是为什么 CALayer 有一个叫做 opaque 的属性了。如果这个属性为 NO，GPU 将不会做任何合成，而是简单从这个层拷贝，不需要考虑它下方的任何东西(因为都被它遮挡住了)。</p>

<h5>1.4.2 <span id="anchor1.4.2">图层对齐&mdash;为何图片缩放会增加GPU工作量</span></h5>

<p>当所有的像素是对齐的时候我们得到相对简单的计算公式。每当 GPU 需要计算出屏幕上一个像素是什么颜色的时候，它只需要考虑在这个像素之上的所有 layer 中对应的单个像素，并把这些像素合并到一起。或者，如果最顶层的纹理是不透明的(即图层树的最底层)，这时候 GPU 就可以简单的拷贝它的像素到屏幕上。</p>

<p>当一个 layer 上所有的像素和屏幕上的像素完美的对应整齐，那这个 layer 就是像素对齐的。主要有两个原因可能会造成不对齐。第一个便是滚动；当一个纹理上下滚动的时候，纹理的像素便不会和屏幕的像素排列对齐。另一个原因便是当纹理的起点不在一个像素的边界上。</p>

<p>在这两种情况下，GPU 需要再做额外的计算。它需要将源纹理上多个像素混合起来，生成一个用来合成的值。当所有的像素都是对齐的时候，GPU 只剩下很少的工作要做。</p>

<p>Core Animation 工具和模拟器有一个叫做 color misaligned images 的选项，当这些在你的 CALayer 实例中发生的时候，这个功能便可向你展示。</p>

<p>关于iOS设备的一些尺寸限制可以看这里：<a href="http://iosres.com/">iOSRes</a></p>

<h5>1.4.3 <span id="anchor1.4.3">关于卡顿的简单原理解释</span><sup id="fnref:6"><a href="#fn:6" rel="footnote">6</a></sup></h5>

<p><img src="http://sonnewilling.com/images/tec/offscreen/offscreen022.png" width="500" alt="image" /></p>

<p>在 VSync 信号到来后，系统图形服务会通过 CADisplayLink 等机制通知 App，App 主线程开始在 CPU 中计算显示内容，比如视图的创建、布局计算、图片解码、文本绘制等。随后 CPU 会将计算好的内容提交到 GPU 去，由 GPU 进行变换、合成、渲染。随后 GPU 会把渲染结果提交到帧缓冲区去，等待下一次 VSync 信号到来时显示到屏幕上。由于垂直同步的机制，如果在一个 VSync 时间内，CPU 或者 GPU 没有完成内容提交，则那一帧就会被丢弃，等待下一次机会再显示，而这时显示屏会保留之前的内容不变。这就是界面卡顿的原因。</p>

<p>从上面的图中可以看到，CPU 和 GPU 不论哪个阻碍了显示流程，都会造成掉帧现象。所以开发时，也需要分别对 CPU 和 GPU 压力进行评估和优化。</p>

<h3><span id="anchor2.0">二，iOS中离屏渲染相关知识</span></h3>

<h4><span id="anchor2.1">2.1 什么是离屏渲染</span></h4>

<ul>
<li><p>On-Screen Rendering<sup id="fnref:7"><a href="#fn:7" rel="footnote">7</a></sup></p>

<p>  意为当前屏幕渲染，指的是GPU的渲染操作是在当前用于显示的屏幕缓冲区中进行。</p></li>
<li><p>Off-Screen Rendering</p>

<p>  意为离屏渲染，指的是GPU在当前屏幕缓冲区以外新开辟一个缓冲区进行渲染操作。</p></li>
</ul>


<p>当图层属性的混合体被指定为在未预合成之前不能直接在屏幕中绘制时，屏幕外渲染就被唤起了。屏幕外渲染并不意味着软件绘制，但是它意味着图层必须在被显示之前在一个屏幕外上下文中被渲染（不论CPU还是GPU）<sup id="fnref:8"><a href="#fn:8" rel="footnote">8</a></sup>。</p>

<p>离屏渲染可以被 Core Animation 自动触发，或者被应用程序强制触发。屏幕外的渲染会合并/渲染图层树的一部分到一个新的缓冲区，然后该缓冲区被渲染到屏幕上。<sup id="fnref:9"><a href="#fn:9" rel="footnote">9</a></sup></p>

<p>这里提到的offscreen rendering主要讲的是通过GPU执行的offscreen,事实上还有的offscreen rendering是通过CPU来执行的。</p>

<p>如果我们重写了drawRect方法，并且使用任何Core Graphics的技术进行了绘制操作，就涉及到了CPU渲染。整个渲染过程由CPU在App内同步地完成，渲染得到的bitmap最后再交由GPU用于显示。其它类似cornerRadios, masks, shadows等触发的offscreen是基于GPU的。</p>

<p><strong><em>PS：CoreGraphic通常是线程安全的，所以可以进行异步绘制，显示的时候再放回主线程</em></strong></p>

<p>许多人有误区,认为offscreen rendering就是software rendering,只是纯粹地靠CPU运算。实际上并不是的,offscreen rendering是个比较复杂,涉及许多方面的内容。我们在开发应用,提高性能通常要注意的是避免offscreen rendering。不需要纠结和拘泥于它的定义。<sup id="fnref:10"><a href="#fn:10" rel="footnote">10</a></sup></p>

<h4><span id="anchor2.2">2.2 为什么要谨慎避免离屏渲染</span></h4>

<p><a href="https://developer.apple.com/videos/#121">WWDC 2011 Understanding UIKit Rendering</a>指出一般导致图形性能的问题大部分都出在了offscreen rendering,因此如果我们发现列表滚动不流畅,动画卡顿等问题,就可以想想和找出我们哪部分代码导致了大量的offscreen 渲染。</p>

<p>离屏渲染主要在两个地方开销较大：</p>

<ol>
<li><p>创建新缓冲区</p>

<p> 要想进行离屏渲染，首先要创建一个新的缓冲区。</p></li>
<li><p>上下文切换</p>

<p> 离屏渲染的整个过程，需要多次切换上下文环境：先是从当前屏幕（On-Screen）切换到离屏（Off-Screen）；等到离屏渲染结束以后，将离屏缓冲区的渲染结果显示到屏幕上有需要将上下文环境从离屏切换到当前屏幕。而上下文环境的切换是要付出很大代价的。</p></li>
</ol>


<h4><span id="anchor2.3">2.3 离屏渲染与光栅化</span></h4>

<p>光栅化的概念前文有介绍，这里再次跟离屏渲染同时提出来是因为在看过的文章中对这两者的区分有些混淆，这里坐下记录。</p>

<p><em>光栅化</em>：</p>

<p>我们屏幕上显示的画面都是由像素组成，而三维物体都是点线面构成的。要让点线面，变成能在屏幕上显示的像素，就需要Rasterize这个过程。就是从矢量的点线面的描述，变成像素的描述。</p>

<ul>
<li>光栅化概念：将图转化为一个个栅格组成的图像</li>
<li>光栅化特点：每个元素对应帧缓冲区中的一像素<sup id="fnref:11"><a href="#fn:11" rel="footnote">11</a></sup></li>
</ul>


<p><img src="http://sonnewilling.com/images/tec/offscreen/rasterize01.png" width="500" alt="image" /></p>

<p>iOS中，光栅化的过程是将图形转化为可以存储的bitmap，放在缓存中，以被程序循环使用，减少渲染的频率。</p>

<p>我的理解是光栅化是一种特殊的离屏渲染，它的主要工作量集中在CPU上，而不是前文介绍的那种GPU单独开辟缓存进行图形生成计算，并且CPU光栅化完成后会将该bitmap缓存于本地，以便重复利用，它在形式上也是一种离屏渲染，但不属于<code>OpenGL</code>名字中特指的那种GPU新开buffer生成图形的过程。</p>

<p>在<code>CALayer</code>中，设置<code>shouldRasterize = YES</code>便会触发光栅化，且会将光栅化后的内容缓存起来。相当于光栅化是把GPU的操作转到CPU上了，生成位图缓存，直接读取复用。</p>

<p>因为离屏渲染本身开销较大，所以对于是否需要光栅化，应该因地制宜地使用。且系统设置了对这个光栅化的内存使用限制，有两点需要注意：</p>

<ol>
<li><p>不要过度使用,系统限制了缓存的大小为2.5X Screen Size.</p>

<p> 如果过度使用,超出缓存之后,同样会造成大量的offscreen渲染。</p></li>
<li><p>被光栅化的图片如果超过100ms没有被使用,则会被移除</p>

<p> 因此我们应该只对连续不断使用的图片进行缓存。对于不常使用的图片缓存是没有意义,且耗费资源的。</p></li>
</ol>


<h4><span id="anchor2.4">2.4 一些触发离屏渲染的基本case与替换方式</span></h4>

<p>除了上面介绍的光栅化可以触发离屏渲染，还有很多种情况可以触发：</p>

<ul>
<li>圆角（当和maskToBounds一起使用时）</li>
<li>图层蒙版</li>
<li>阴影</li>
</ul>


<p>对于那些需要动画而且要在屏幕外渲染的图层来说，你可以用<code>CAShapeLayer</code>，<code>contentsCenter</code>或者<code>shadowPath</code>来获得同样的表现而且较少地影响到性能<sup id="fnref:12"><a href="#fn:12" rel="footnote">12</a></sup>。</p>

<h3>三，<span id="anchor3.0">iOS的一些显示性能检测方法的简单介绍</span></h3>

<h4>3.1 <span id="anchor3.1">显示性能检测一些小Tip</span></h4>

<ul>
<li><p>关注FPS</p>

<p>  FPS-Frame per Second,帧率或画面更新率是用于测量显示帧数的量度。，一般来说FPS用于描述视频、电子绘图或游戏每秒播放多少帧，而赫兹则描述显示器的画面每秒更新多少次。在实际体验中，60帧相对于30帧有着更好的体验。<sup id="fnref:13"><a href="#fn:13" rel="footnote">13</a></sup></p>

<p>  在开发中，我们应该对FPS的数值保持关注，若发现掉帧严重则可以进一步使用Instruments分析是哪里出现的问题。现在工程里的beta版本的debug包已经附加了此功能。</p></li>
<li><p>CPU &amp;&amp; GPU<sup id="fnref:14"><a href="#fn:14" rel="footnote">14</a></sup></p>

<p>  CPU，中央处理器。GPU，图形处理器。两者都有总线和外界联系，有自己的缓存体系，以及数字和逻辑运算单元。一句话，两者都为了完成计算任务而设计。</p>

<p>  两者的区别在于存在于片内的缓存体系和数字逻辑运算单元的结构差异：CPU虽然有多核，但总数没有超过两位数，GPU的核数远超CPU，被称为众核（NVIDIA Fermi有512个核）。从结果上导致CPU擅长处理具有复杂计算步骤和复杂数据依赖的计算任务，GPU的众核架构非常适合把同样的指令流并行发送到众核上，采用不同的输入数据执行。</p>

<p>  并且GPU拥有为视频运算专门设计的运算单元: 光栅单元和纹理填充单元。是专为图形而生的。</p>

<p>  <img src="http://sonnewilling.com/images/tec/offscreen/opti04.png" width="500" alt="image" /></p>

<p>  所以在开发过程中，心中应该有个尺度，对于主线程的UI响应等一些逻辑工作，我们尽量交给CPU来完成，而图形渲染的工作则多交给GPU搞定，检查有没有做无必要的CPU渲染，例如有些地方我们重写了drawRect或开启了光栅化，而其实是我们不需要也不应该的。</p></li>
<li><p>离屏渲染的消耗</p>

<p>  这会耗费GPU的资源，像前面已经分析的到的。offscreen 渲染会导致GPU需要不断地onScreen和offscreen进行上下文切换。</p></li>
<li><p>Blended Layers | Misaligned Images</p>

<p>  检查我们有无过多的合成 | Blending，图片的格式是否为常用格式，大小是否正常。如果一个图片格式不被GPU所支持，则只能通过CPU来渲染。</p></li>
</ul>


<h4>3.2 <span id="anchor3.2">Instruments &ndash; Core Animation</span></h4>

<p>使用Core Animation可以帮助我们通过观察FPS来定位问题所在。如下图所示，两个红框处便是掉帧比较严重的地方，分别是股票详情页与牛圈首页，然后我们在选取此处，观察调用栈，便可以找出哪里吃性能比较严重了。</p>

<p><img src="http://sonnewilling.com/images/tec/offscreen/opti01.png" width="500" alt="image" /></p>

<p>又如下图，可以通过勾选不同的选项，观察页面中是否存在，<em>Blended Layers</em>，<em>Misaligned Images</em>等一系列前文提到的可优化点。</p>

<p><img src="http://sonnewilling.com/images/tec/offscreen/opti03.png" width="500" alt="image" /></p>

<ul>
<li><p><code>Color Blended Layers</code>，这个选项选项基于渲染程度对屏幕中的混合区域进行绿到红的高亮显示，越红表示性能越差，会对帧率等指标造成较大的影响。红色通常是由于多个半透明图层叠加引起。<sup id="fnref:15"><a href="#fn:15" rel="footnote">15</a></sup></p></li>
<li><p><code>Color Offscreen-Rendered Yellow</code>，这个选项会把那些离屏渲染的图层显示为黄色。黄色越多，性能越差。这些显示为黄色的图层很可能需要用 shadowPath 或者 shouldRasterize 来优化。</p></li>
<li><p><code>Flash Updated Regions</code>，这个选项会把重绘的内容显示为黄色。不该出现的黄色越多，性能越差。通常我们希望只是更新的部分被标记完黄色。</p></li>
</ul>


<h4>3.3 <span id="anchor3.3">Instruments &ndash; OpenGL ES</span></h4>

<p>OpenGL ES驱动工具可以帮你测量GPU的利用率，同样也是一个很好的来判断和GPU相关动画性能的指示器。它同样也提供了类似Core Animation那样显示FPS的工具</p>

<p><img src="http://sonnewilling.com/images/tec/offscreen/opti05.png" width="500" alt="image" /></p>

<p>Renderer Utilization &ndash; 如果这个值超过了~50%，就意味着你的动画可能对帧率有所限制，很可能因为离屏渲染或者是重绘导致的过度混合。</p>

<p>Tiler Utilization &ndash; 如果这个值超过了~50%，就意味着你的动画可能限制于几何结构方面，也就是在屏幕上有太多的图层占用了。</p>

<h3>四，<span id="anchor4.0">AsyncDisplayKit分享</span></h3>

<h4>4.1 <span id="anchor4.1">AsyncDisplayKit是干什么的</span></h4>

<p>AsyncDisplayKit is an iOS framework that keeps even the most complex user interfaces smooth and responsive. It was originally built to make Facebook&rsquo;s Paper possible, and goes hand-in-hand with pop&rsquo;s physics-based animations — but it&rsquo;s just as powerful with UIKit Dynamics and conventional app designs.<sup id="fnref:16"><a href="#fn:16" rel="footnote">16</a></sup></p>

<h4>4.2 <span id="anchor4.2">AsyncDisplayKit的一些性能上的优势</span></h4>

<p>AsyncDisplayKit Nodes are a thread-safe abstraction layer over UIViews and CALayers:</p>

<p><img src="http://sonnewilling.com/images/tec/offscreen/asdk01.png" alt="image" /></p>

<p>If you know how to use views, you know how to use nodes. ASImageNode and the Text Kit-powered ASTextNode can be used just like their UIKit counterparts. Unlike UIKit view hierarchies, node hierarchies for entire screenfuls of content can be initialized and laid out on background threads — and nodes make it easy to take advantage of the multicore CPUs in all current iOS devices.</p>

<p>Nodes have many advantages over views. For example, you can often improve performance by replacing views with layers. Unfortunately, doing so requires the tedious process of porting view-based code to the different API and inevitably risks regressions. With nodes, it’s as easy as:<sup id="fnref:17"><a href="#fn:17" rel="footnote">17</a></sup></p>

<p><img src="http://sonnewilling.com/images/tec/offscreen/asdk02.png" width="250" alt="image" /></p>

<p>If you later need to switch from layers back to views, it’s a one-line change! This is a transformational difference. Instead of being cautious of layer-backed UI code, you can use it by default whenever you don’t need touch handling.</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/">屏幕显示图像的原理</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="http://objccn.io/issue-3-1/">Getting Pixels onto the Screen</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="http://www.cocoachina.com/industry/20130821/6841.html">iOS图形处理和性能</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><a href="https://github.com/100mango/zen/blob/master/WWDC%E5%BF%83%E5%BE%97%EF%BC%9AAdvanced%20Graphics%20and%20Animations%20for%20iOS%20Apps/Advanced%20Graphics%20and%20Animations%20for%20iOS%20Apps.md">WWDC心得与延伸:iOS图形性能 &mdash; 方秋枋</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p><a href="https://www.objc.io/issues/3-views/moving-pixels-onto-the-screen/">Compositing</a><a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
<li id="fn:6">
<p><a href="http://blog.ibireme.com/2015/11/12/smooth_user_interfaces_for_ios/">卡顿产生的原因和解决方案</a><a href="#fnref:6" rev="footnote">&#8617;</a></p></li>
<li id="fn:7">
<p><a href="http://foggry.com/blog/2015/05/06/chi-ping-xuan-ran-xue-xi-bi-ji/">离屏渲染学习笔记</a><a href="#fnref:7" rev="footnote">&#8617;</a></p></li>
<li id="fn:8">
<p><a href="https://zsisme.gitbooks.io/ios-/content/chapter15/offscreen-rendering.html">ios核心动画高级技巧</a><a href="#fnref:8" rev="footnote">&#8617;</a></p></li>
<li id="fn:9">
<p><a href="http://objccn.io/issue-3-1/">离屏渲染(Offscreen Rendering)</a><a href="#fnref:9" rev="footnote">&#8617;</a></p></li>
<li id="fn:10">
<p><a href="https://github.com/100mango/zen/blob/master/WWDC%E5%BF%83%E5%BE%97%EF%BC%9AAdvanced%20Graphics%20and%20Animations%20for%20iOS%20Apps/Advanced%20Graphics%20and%20Animations%20for%20iOS%20Apps.md">关于offscreen rendering &mdash; 方秋枋</a><a href="#fnref:10" rev="footnote">&#8617;</a></p></li>
<li id="fn:11">
<p><a href="http://www.jianshu.com/p/6d24a4c29e18">iOS 离屏渲染的研究 &mdash; 齐滇大圣</a><a href="#fnref:11" rev="footnote">&#8617;</a></p></li>
<li id="fn:12">
<p><a href="https://zsisme.gitbooks.io/ios-/content/chapter15/offscreen-rendering.html">CAShapeLayer使用方式的介绍</a><a href="#fnref:12" rev="footnote">&#8617;</a></p></li>
<li id="fn:13">
<p><a href="https://zh.wikipedia.org/wiki/%E5%B8%A7%E7%8E%87">帧率 &ndash; wiki</a><a href="#fnref:13" rev="footnote">&#8617;</a></p></li>
<li id="fn:14">
<p><a href="https://www.zhihu.com/question/19903344">CPU 和 GPU 的区别是什么？ &ndash; 王洋子豪</a><a href="#fnref:14" rev="footnote">&#8617;</a></p></li>
<li id="fn:15">
<p><a href="http://www.samirchen.com/use-instruments/">使用 Instruments 做 iOS 程序性能调试</a><a href="#fnref:15" rev="footnote">&#8617;</a></p></li>
<li id="fn:16">
<p><a href="https://github.com/facebook/AsyncDisplayKit">facebook/AsyncDisplayKit</a><a href="#fnref:16" rev="footnote">&#8617;</a></p></li>
<li id="fn:17">
<p><a href="https://code.facebook.com/posts/721586784561674/introducing-asyncdisplaykit-for-smooth-and-responsive-apps-on-ios/">Introducing AsyncDisplayKit: For smooth and responsive apps on iOS</a><a href="#fnref:17" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[行走]]></title>
    <link href="http://sonnewilling.com/blog/2016/06/16/nian-gen-er/"/>
    <updated>2016-06-16T20:48:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2016/06/16/nian-gen-er</id>
    <content type="html"><![CDATA[<p>岁末，便是假期，心已跑回了老家的小院。</p>

<p>那儿有棵树，春天开满白色的花。</p>

<p>再不久便结了一树的樱桃。搭梯子爬上一旁的小屋，房顶端个盛水的瓢，清冽，人影荡在里面。</p>

<p>浸着刚摘的樱桃，起起伏伏，是小时候的心情。为假期开心，为作业苦恼，爱这一瓢的樱桃和下面张望的姥姥。</p>

<p>只道寻常，不再得遇。</p>

<!--more-->


<h3>Chapter 1</h3>

<p>姥姥说过，吃饱不想家，真对。乡情发酵，咽下肚去，都是大馒头的味道。</p>

<p>毕业以后，每年只有过年回家。家人围坐一桌，都是姥姥的手艺。酒酣过半，又是包子大的牛肉饺子端上来，大家嚷着少下点，吃不动了，却都又不含糊地一扫而光。</p>

<p>近几年回家眼瞅着姥姥身子渐渐老了下去，不想竟如此之快。前个月还因表弟结婚回趟家。下了飞机坐上姥爷接我回去的车，还未到家便急不可待地给姥姥电话，嚷嚷着马上到家要吃饭啦。</p>

<h3>Chapter 2</h3>

<p>国产电视剧钟爱康熙王朝，中间有个片段讲年少的康熙因为急着出门被门槛绊了下，一怒之下，把宫廷里所有的门槛都拆了。后来渐渐成长，又把门槛装了回去，说，唯有装上门槛，出门才有气魄。</p>

<p>当时说不上为什么，却唯独印象深刻。现在想来便是一种从少不更事到成熟的过程。年少时，觉得生活中一堆繁文缛节，好不爽快，慢慢经历多了就发现，唯有一些礼节才能凸显庄重，表达情分。所以说少不读水浒，本来就是该学礼的年龄，读的都是一些造反的书，着实是不好管教的，自己便深有体会。</p>

<p>看哭丧的人，最亲的人可能早哭干了眼泪，旁系的一些家属却每能在关键的节点放出声来，初时，你有些瞧不起，后来却偏向了他们。这些场合最需要的还是他们，他们其实也是通过这种方式融入整个家族。大家都缺一不可。便是礼节，最深的情不是每个人都有，但通过这些礼节，可以把更多的人聚合在一起。</p>

<p>五点半到站，尚未天亮，背包走出车站，本打算去公共车站坐大巴，发现旁边凑来的大妈给的黑车价格还不错便坐了上去。随后又上来两位汉子，便乘着夜色向家奔去。</p>

<p>言谈中得知他们是去QG的兵哥哥，本以为也是放假回家却发现是去部队报道的。纳闷那里的师团撤掉后还有什么剩下。</p>

<p>睡意朦胧中到了他们的连部，还真的有部队在这儿。回来的路上跟司机攀谈，三十一师跟十七团确实撤掉了，但还有个场站驻守，维护机场之类的吧。</p>

<p>不宽的路被</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS New Feature -- 3D Touch]]></title>
    <link href="http://sonnewilling.com/blog/2016/06/01/ios-new-feature-3d-touch/"/>
    <updated>2016-06-01T14:39:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2016/06/01/ios-new-feature-3d-touch</id>
    <content type="html"><![CDATA[<h3>一. 功能介绍</h3>

<p>3D Touch 是苹果公司最新推出的一种应用在手机上的技术，基于iOS9系统与6s设备，它拓展了手机的操作维度，由平面的两维空间空间拓展为立体的三维空间。针对手机屏幕，在纵向上对压按进行响应，由此衍生出更多的操作场景。</p>

<blockquote><p>   With iOS 9, new iPhone models add a third dimension to the user interface.</p>

<ul>
<li><p> A user can now press your Home screen icon to immediately access functionality provided by your app.></p></li>
<li><p>Within your app, a user can now press views to see previews of additional content and gain accelerated access to features.</p></li>
</ul>
</blockquote>

<!--more-->


<p>根据苹果官方文档<a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/index.html#//apple_ref/doc/uid/TP40016543-CH1-SW1">Getting Started with 3D Touch</a>介绍，3D touch可增加以下三种UI新体验：</p>

<h4>1. Home Screen Quick Actions</h4>

<p>按压Home screen上特定App图标，提供快捷方式跳转去App的不同功能场景。</p>

<p><img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/Art/maps_directions_home_2x.png" alt="image" /></p>

<h4>2. Peek and Pop</h4>

<p>App运行中时，按压某个View提供预览功能。</p>

<blockquote><p>You can also enable peek and pop for links in web views, as described in <a href="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/3DTouchAPIs.html#//apple_ref/doc/uid/TP40016543-CH4-SW5">Web View Peek and Pop</a>.</p></blockquote>

<p><img src="https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Adopting3DTouchOniPhone/Art/peek_2x.png" alt="image" /></p>

<h4>3. Force Properties</h4>

<blockquote><p>In iOS 9, the <code>UITouch</code> class has two new properties to support custom implementation of 3D Touch in your app: <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITouch_Class/index.html#//apple_ref/occ/instp/UITouch/force">force</a> and <a href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITouch_Class/index.html#//apple_ref/occ/instp/UITouch/maximumPossibleForce">maximumPossibleForce</a>. For the first time on iOS devices, these properties let you detect and respond to touch pressure in the <code>UIEvent</code> objects your app receives.</p>

<p>The force of a touch has a high dynamic range, available as a floating point value to your app.</p></blockquote>

<h3>二. 特性实现介绍</h3>

<p>App内有统一接口判断当前设备与系统3D Touch是否可用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="nf">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">traitCollection</span><span class="p">.</span><span class="n">forceTouchCapability</span> <span class="o">==</span> <span class="p">.</span><span class="n">Available</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">registerForPreviewingWithDelegate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">sourceView</span><span class="o">:</span> <span class="n">view</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Create an alert to display to the user.</span>
</span><span class='line'>        <span class="n">alertController</span> <span class="o">=</span> <span class="n">UIAlertController</span><span class="p">(</span><span class="n">title</span><span class="o">:</span> <span class="s">&quot;3D Touch Not Available&quot;</span><span class="p">,</span> <span class="n">message</span><span class="o">:</span> <span class="s">&quot;Unsupported device.&quot;</span><span class="p">,</span> <span class="n">preferredStyle</span><span class="o">:</span> <span class="p">.</span><span class="n">Alert</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>1. Home Screen Quick Actions</h4>

<p>基本数据结构：<code>UIApplicationShortcutItem</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">UIApplicationShortcutItem</span> <span class="o">:</span> <span class="n">NSObject</span><span class="p">,</span> <span class="n">NSCopying</span><span class="p">,</span> <span class="n">NSMutableCopying</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">init</span><span class="p">(</span><span class="n">type</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">localizedTitle</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">localizedSubtitle</span><span class="o">:</span> <span class="n">String</span><span class="o">?</span><span class="p">,</span> <span class="n">icon</span><span class="o">:</span> <span class="n">UIApplicationShortcutIcon</span><span class="o">?</span><span class="p">,</span> <span class="n">userInfo</span><span class="o">:</span> <span class="p">[</span><span class="n">NSObject</span> <span class="o">:</span> <span class="n">AnyObject</span><span class="p">]</span><span class="o">?</span><span class="p">)</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">convenience</span> <span class="n">init</span><span class="p">(</span><span class="n">type</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">localizedTitle</span><span class="o">:</span> <span class="n">String</span><span class="p">)</span>
</span><span class='line'>    <span class="c1">// An application-specific string that identifies the type of action to perform.</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="n">type</span><span class="o">:</span> <span class="n">String</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Properties controlling how the item should be displayed on the home screen.</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="n">localizedTitle</span><span class="o">:</span> <span class="n">String</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="n">localizedSubtitle</span><span class="o">:</span> <span class="n">String</span><span class="o">?</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="err">@</span><span class="n">NSCopying</span> <span class="n">public</span> <span class="n">var</span> <span class="n">icon</span><span class="o">:</span> <span class="n">UIApplicationShortcutIcon</span><span class="o">?</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Application-specific information needed to perform the action.</span>
</span><span class='line'>    <span class="c1">// Will throw an exception if the NSDictionary is not plist-encodable.</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="n">userInfo</span><span class="o">:</span> <span class="p">[</span><span class="n">String</span> <span class="o">:</span> <span class="n">NSSecureCoding</span><span class="p">]</span><span class="o">?</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>UIApplicationShortcutItemType</code>与<code>UIApplicationShortcutItemTitle</code>是必填项，其它选填。</p>

<p><em>注意事项：</em></p>

<ol>
<li>快捷标签最多可以创建四个，包括静态的和动态的。</li>
<li>每个标签的题目和icon最多两行，多出的会用&hellip;省略</li>
</ol>


<p>添加<code>ShortcutItem</code>有两种方式：</p>

<ul>
<li><p><strong>Static quick actions</strong></p>

<p>  直接在App的系统plist文件里添加</p>

<p>  <img src="https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Art/UIApplicationShortcutItems_plist_editor_2x.png" height="250" width="700" alt="image" /></p></li>
<li><p><strong>Dynamic quick actions</strong></p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">lazy</span> <span class="n">var</span> <span class="n">dynamicShortcuts</span> <span class="o">=</span> <span class="n">UIApplication</span><span class="p">.</span><span class="n">sharedApplication</span><span class="p">().</span><span class="n">shortcutItems</span> <span class="o">??</span> <span class="p">[]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">shortcutItem</span> <span class="o">=</span> <span class="n">UIApplicationShortcutItem</span><span class="p">(</span><span class="n">type</span><span class="o">:</span> <span class="n">selectedShortcutItem</span><span class="p">.</span><span class="n">type</span><span class="p">,</span> <span class="n">localizedTitle</span><span class="o">:</span> <span class="n">titleTextField</span><span class="p">.</span><span class="n">text</span> <span class="o">??</span> <span class="s">&quot;&quot;</span><span class="p">,</span> <span class="n">localizedSubtitle</span><span class="o">:</span> <span class="n">subtitleTextField</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="n">icon</span><span class="o">:</span> <span class="n">icon</span><span class="p">,</span> <span class="n">userInfo</span><span class="o">:</span> <span class="p">[</span>
</span><span class='line'>                   <span class="n">AppDelegate</span><span class="p">.</span><span class="n">applicationShortcutUserInfoIconKey</span><span class="o">:</span> <span class="n">pickerView</span><span class="p">.</span><span class="n">selectedRowInComponent</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>               <span class="p">]</span>
</span><span class='line'>           <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">dynamicShortcuts</span><span class="p">[</span><span class="n">selected</span><span class="p">.</span><span class="n">row</span><span class="p">]</span> <span class="o">=</span> <span class="n">updatedShortcutItem</span>
</span><span class='line'><span class="c1">// Update the application&#39;s `shortcutItems`.</span>
</span><span class='line'><span class="n">UIApplication</span><span class="p">.</span><span class="n">sharedApplication</span><span class="p">().</span><span class="n">shortcutItems</span> <span class="o">=</span> <span class="n">dynamicShortcuts</span>
</span></code></pre></td></tr></table></div></figure>


<p>点击后的事件响应在App delegate里处理：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/* </span>
</span><span class='line'><span class="cm">    Called when the user activates your application by selecting a shortcut on the home screen, except when </span>
</span><span class='line'><span class="cm">    application(_:,willFinishLaunchingWithOptions:) or application(_:didFinishLaunchingWithOptions) returns `false`.</span>
</span><span class='line'><span class="cm">    You should handle the shortcut in those callbacks and return `false` if possible. In that case, this </span>
</span><span class='line'><span class="cm">    callback is used if your application is already launched in the background.</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="n">func</span> <span class="nf">application</span><span class="p">(</span><span class="n">application</span><span class="o">:</span> <span class="n">UIApplication</span><span class="p">,</span> <span class="n">performActionForShortcutItem</span> <span class="n">shortcutItem</span><span class="o">:</span> <span class="n">UIApplicationShortcutItem</span><span class="p">,</span> <span class="n">completionHandler</span><span class="o">:</span> <span class="n">Bool</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">let</span> <span class="n">handledShortCutItem</span> <span class="o">=</span> <span class="n">handleShortCutItem</span><span class="p">(</span><span class="n">shortcutItem</span><span class="p">)</span>
</span><span class='line'>    <span class="n">completionHandler</span><span class="p">(</span><span class="n">handledShortCutItem</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>2. Peek and Pop</h4>

<p>关键数据结构：<code>UIPreviewAction</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">UIPreviewAction</span> <span class="o">:</span> <span class="n">NSObject</span><span class="p">,</span> <span class="n">NSCopying</span><span class="p">,</span> <span class="n">UIPreviewActionItem</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="n">handler</span><span class="o">:</span> <span class="p">(</span><span class="n">UIPreviewActionItem</span><span class="p">,</span> <span class="n">UIViewController</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">convenience</span> <span class="n">init</span><span class="p">(</span><span class="n">title</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">style</span><span class="o">:</span> <span class="n">UIPreviewActionStyle</span><span class="p">,</span> <span class="n">handler</span><span class="o">:</span> <span class="p">(</span><span class="n">UIPreviewAction</span><span class="p">,</span> <span class="n">UIViewController</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">Void</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">UIPreviewActionGroup</span> <span class="o">:</span> <span class="n">NSObject</span><span class="p">,</span> <span class="n">NSCopying</span><span class="p">,</span> <span class="n">UIPreviewActionItem</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">convenience</span> <span class="n">init</span><span class="p">(</span><span class="n">title</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">style</span><span class="o">:</span> <span class="n">UIPreviewActionStyle</span><span class="p">,</span> <span class="n">actions</span><span class="o">:</span> <span class="p">[</span><span class="n">UIPreviewAction</span><span class="p">])</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">lazy</span> <span class="n">var</span> <span class="n">previewActions</span><span class="o">:</span> <span class="p">[</span><span class="n">UIPreviewActionItem</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">func</span> <span class="n">previewActionForTitle</span><span class="p">(</span><span class="n">title</span><span class="o">:</span> <span class="n">String</span><span class="p">,</span> <span class="n">style</span><span class="o">:</span> <span class="n">UIPreviewActionStyle</span> <span class="o">=</span> <span class="p">.</span><span class="n">Default</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">UIPreviewAction</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">UIPreviewAction</span><span class="p">(</span><span class="n">title</span><span class="o">:</span> <span class="n">title</span><span class="p">,</span> <span class="n">style</span><span class="o">:</span> <span class="n">style</span><span class="p">)</span> <span class="p">{</span> <span class="n">previewAction</span><span class="p">,</span> <span class="n">viewController</span> <span class="n">in</span>
</span><span class='line'>                <span class="n">guard</span> <span class="n">let</span> <span class="n">detailViewController</span> <span class="o">=</span> <span class="n">viewController</span> <span class="n">as</span><span class="o">?</span> <span class="n">DetailViewController</span><span class="p">,</span>
</span><span class='line'>                          <span class="n">sampleTitle</span> <span class="o">=</span> <span class="n">detailViewController</span><span class="p">.</span><span class="n">sampleTitle</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
</span><span class='line'>                <span class="n">print</span><span class="p">(</span><span class="s">&quot;\(previewAction.title) triggered from `DetailViewController` for item: \(sampleTitle)&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">action1</span> <span class="o">=</span> <span class="n">previewActionForTitle</span><span class="p">(</span><span class="s">&quot;Default Action&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">action2</span> <span class="o">=</span> <span class="n">previewActionForTitle</span><span class="p">(</span><span class="s">&quot;Destructive Action&quot;</span><span class="p">,</span> <span class="n">style</span><span class="o">:</span> <span class="p">.</span><span class="n">Destructive</span><span class="p">)</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">subAction1</span> <span class="o">=</span> <span class="n">previewActionForTitle</span><span class="p">(</span><span class="s">&quot;Sub Action 1&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">subAction2</span> <span class="o">=</span> <span class="n">previewActionForTitle</span><span class="p">(</span><span class="s">&quot;Sub Action 2&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">let</span> <span class="n">groupedActions</span> <span class="o">=</span> <span class="n">UIPreviewActionGroup</span><span class="p">(</span><span class="n">title</span><span class="o">:</span> <span class="s">&quot;Sub Actions…&quot;</span><span class="p">,</span> <span class="n">style</span><span class="o">:</span> <span class="p">.</span><span class="n">Default</span><span class="p">,</span> <span class="n">actions</span><span class="o">:</span> <span class="p">[</span><span class="n">subAction1</span><span class="p">,</span> <span class="n">subAction2</span><span class="p">]</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span><span class="n">action1</span><span class="p">,</span> <span class="n">action2</span><span class="p">,</span> <span class="n">groupedActions</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}()</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过重载</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">func</span> <span class="n">previewingContext</span><span class="p">(</span><span class="n">previewingContext</span><span class="o">:</span> <span class="n">UIViewControllerPreviewing</span><span class="p">,</span> <span class="n">viewControllerForLocation</span> <span class="n">location</span><span class="o">:</span> <span class="n">CGPoint</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">UIViewController</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成对应的快速预览图，本身重载</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">override</span> <span class="n">func</span> <span class="n">previewActionItems</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="n">UIPreviewActionItem</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>来生成下一步动作。</p>

<h4>3. Force Properties</h4>

<p>在<code>UITouch</code>对象中新增了<code>force</code>与<code>maximumPossibleForce</code>，可以根据<code>force</code>定制化自己的需求</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">public</span> <span class="n">class</span> <span class="n">UITouch</span> <span class="o">:</span> <span class="n">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Force of the touch, where 1.0 represents the force of an average touch</span>
</span><span class='line'>    <span class="err">@</span><span class="n">available</span><span class="p">(</span><span class="n">iOS</span> <span class="mf">9.0</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="n">force</span><span class="o">:</span> <span class="n">CGFloat</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'>    <span class="c1">// Maximum possible force with this input mechanism</span>
</span><span class='line'>    <span class="err">@</span><span class="n">available</span><span class="p">(</span><span class="n">iOS</span> <span class="mf">9.0</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span>
</span><span class='line'>    <span class="n">public</span> <span class="n">var</span> <span class="n">maximumPossibleForce</span><span class="o">:</span> <span class="n">CGFloat</span> <span class="p">{</span> <span class="n">get</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[日光城的歌]]></title>
    <link href="http://sonnewilling.com/blog/2015/10/09/ri-guang-cheng-de-ge/"/>
    <updated>2015-10-09T21:05:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2015/10/09/ri-guang-cheng-de-ge</id>
    <content type="html"><![CDATA[<h2>Z</h2>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="http://music.163.com/outchain/player?type=2&id=383950&auto=0&height=32"></iframe>


<p>北哥是个音域很广的汉子。</p>

<p>我听过他唱青藏高原，雄厚嘹亮，转头扯起冷血动物也有模有样，灌下一斤牛栏山和小妹妹对飚月亮弯弯，从心所欲。</p>

<p>那时我觉得我已经很了解他了，毕竟我知道他能唱什么样的歌。</p>

<p>但那天，当有个妹子点起了不知什么犄角旮旯的棒子舞曲的时候，一瞥间，北哥拿起了另一只话筒，我差点泪眼朦胧，这特么也可以啊，卧槽。北哥，你究竟还有多少不为人知的故事。</p>

<p>北哥188，100KG，手指灵活可奏宫崎骏，临行前，他给我推荐了这首歌曲，没有听懂，大家可以试试。</p>

<!--more-->


<h2>A</h2>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="http://music.163.com/outchain/player?type=2&id=368929&auto=0&height=32"></iframe>


<p>国庆长假最后一晚跟一路同行的伙伴把酒言欢，有叔，烤羊，宝贝儿和藏香鸡，不亦乐乎。</p>

<p>叔是山东老乡，年龄不方便透露，当时猜他生于民国年间，后自罚一杯，权作参考。</p>

<p>叔心态甚好，下午去纳木错看日落将将错过十几分钟，发誓早起看日出。大早上顶着4000m高原的寒风，披星戴月却爬错了山头，他的山头与湖水日光间还隔了座山，抱憾而归。不，准确的说是回程捡了很多石头抱石而归。</p>

<p>烤羊，好吃。</p>

<p>宝贝儿，生于中原，少时入蜀，流连于靡靡声色，大半夜同屋时与临床小女友不停的在说宝贝儿，一起睡吧，众人皆醒，由此得名。我辈尚好，叔尤其尴尬，戎马半生，落得如此下场，只得假寐。</p>

<p>藏香鸡，好吃。</p>

<h2>B</h2>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="http://music.163.com/outchain/player?type=2&id=95663&auto=0&height=32"></iframe>


<p>上次火车入藏还要追溯到大三寒假。那时候便惊叹我党的力量。</p>

<p>世界屋脊上，逢山开洞，遇谷架桥，任凭地表起伏，我自岿然不动。算是很美的观光铁路。啤酒也是一路喝来，珠江，青岛，黄河到拉萨，快哉。</p>

<p>车上认识了一对深圳出发的朋友，两天半的旅途又增许多欢乐。到拉萨整顿一新后便相约去吃藏餐。大昭寺旁边，一栋小楼的天台上，远处的夕阳映着大昭寺金灿灿的屋顶更加庄严。按捺不住心中的激动点了三盘糌粑，一壶酥油茶。</p>

<p>青稞酒好喝，拉萨啤酒倒也爽口，你问我糌粑和酥油茶咋样？随他去吧，爱谁谁，不想再提起。</p>

<p>晚上四人一行又找了家麻辣烫来过瘾，很豪气的跟老板说要加辣。上来稍吃几口便嘴里冒火，再几口肉后桌上的卷纸也所剩不多，迫于无奈屈辱的跟老板说要加水，看着周围康巴汉子安之若素的样子，日了狗。</p>

<h2>C</h2>

<p>到拉萨的当天下午便找拼车出行的团，天公尚美，给我们报上了最后两个座位，还取了个很俗气的名字叫“一错再错”，意味着路上要看的两片湖，纳木错和羊卓雍错。</p>

<p>先去的是羊湖，爬了一上午的山，豁然开朗，凭高而望，寡人与庶人共享此风耶？</p>

<p><img src="http://sonnewilling.com/images/road/tibet/yang.JPG" alt="image" /></p>

<p>下来羊湖便直奔日喀则，下午6点多才到。这边因为经度靠西的缘故，太阳倒还有一两个小时才下山。便乘兴去逛了扎西绒布寺。</p>

<p>跟着讲解一条条路，一间间房听下来，西藏的历史也了解了不少。抬头看是灯芯树，不远处煨桑的袅袅白烟隐向天空。手边白墙黑框窗，布帘摇曳。间或路过一个喇嘛，年纪相仿，披着厚红的僧衣，偶尔提个鼓囊囊的麻袋，抬头看一眼我们便又沿着墙边走开转角隐在一扇门后。看高墙上小小的窗棂，不知如何一生苦守，白云哪会来作伴。</p>

<p>太阳落山时离开寺庙，一夜无话。</p>

<h2>D</h2>

<p>次日乘车往纳木错奔去。路过羊八井泡了个高原温泉一洗风尘。当真一半火焰一半寒冰。走出池子不出几秒便已瑟瑟发抖，两寸的头发一会便吹得生疼。</p>

<p><img src="http://sonnewilling.com/images/road/tibet/swim.JPG" alt="image" /></p>

<p>最近国家对西藏旅游抓的很严，很多道路限速30km/h，开个60都是100%的超速，故坐在车上久且没意思，此一比较大的败笔，安全是安全了，趣味全无。</p>

<p>晚上夜宿纳木错棚屋，一众人在中间类似餐厅最大的棚屋里烤火嗑瓜子玩谁是卧底，一盘还没搞定便被藏民赶出，说他们自己要睡觉，回到自己干巴巴的棚屋，悲从中来。出门顶着瑟瑟寒风露天刷牙时，隔着玻璃看到藏民三五成群在那餐厅里吃花生喝啤酒，突然有种卖火柴小女孩的感觉。好在自小受过教育要吃苦在前享乐在后，看他们一副旧社会臭地主的模样画个圈圈诅咒他们。</p>

<p>与之前来的几次相较，此处的旅游风气也渐渐浓厚起来。</p>

<p>叔有对把玩良久的核桃，平时看他没事就拿把小牙刷在那对着核桃擦，擦，擦。有次下车见旁边有几个藏民在卖些小饰品，想秀一波核桃的时候却被一个藏民汉子一把攥下来，讨要不得。最后也索性把另一个核桃给让了出去，已经颇有些南疆的风范了。沿路上厕所不论大小两元均价童叟无欺。算下来竟也是笔不小的开支。</p>

<h2>E</h2>

<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=298 height=52 src="http://music.163.com/outchain/player?type=2&id=28138269&auto=0&height=32"></iframe>


<h4>念青唐古拉</h4>

<p><img src="http://sonnewilling.com/images/road/tibet/bi.JPG" alt="image" /></p>

<h2>F</h2>

<p>最后一天留在拉萨闲逛，博物馆进去看了一遭，学习一番。布达拉，大昭寺仅外面转一圈罢了，门票贵且难买，里面也看不懂，没啥意思。倒是外面转的时候摸一路转经筒，两块钱买把松柏枝煨桑敬天颇有风情。</p>

<p>晚上看了场电影，比深圳还贵，优惠后70一张还特么送瓶红酒，我竟无力吐槽。要不是晚上喝的啤酒且鉴于我一向啤酒掺红酒闹事最厉害，肯定看电影时干掉它，不然何以解恨。</p>

<p>夏洛特烦恼，一个笑点不赶紧笑完下个便漏了过去，大概是疯狂原始人后笑得最欢畅的一场了。</p>

<p>散场出来九点过半凉意袭人。路上的士难打，人力三轮倒还有不少。其中一位见我们打不着车上来询问生意，开价15而已，便点头上车。岁数不小的样子，大概竟比我跟SU的年龄合起来还大些。一身宽大的灰布西服身上晃来晃去，干瘦。双鬓簇簇白发，不似当地人的模样。骑到江苏路上后便还有一两个路口就到，似乎慢慢加起劲来，肩膀摆动，一双布鞋在脚上拧来拧去。旁边SU开始翻倒钱包，到地儿后将找到的零钱都倒给了他。后且不论，希望今晚可以早些收工，算是我们一些小小的心意。</p>

<p>转进胡同后转头还见他跟我们招手致意，慢慢骑去。赠人玫瑰手有余香当真如此，暖意也是充盈心间，抽根烟回去洗洗睡，今儿度过了有意义的一天。</p>

<h2>X</h2>

<p>第二天八点多起床，乘飞机返程，四点半便回到家中，与两天半的火车旅途自不可同日而语。看下午日头不错还去游了个泳。一个来回下来便气喘如牛，大概太久没运动的缘故。</p>

<p>便是这样又回到了城市间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[蛮荒记]]></title>
    <link href="http://sonnewilling.com/blog/2015/06/26/man-huang-ji/"/>
    <updated>2015-06-26T00:32:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2015/06/26/man-huang-ji</id>
    <content type="html"><![CDATA[<h2>0.1 无关紧要的废话</h2>

<blockquote><p>好久没写东西了。</p>

<p>虽说也是天天敲键盘，总归代码跟字不同。字是自己磨出来的，然而并没有什么卵用，自己无聊的时候回来看看解解闷罢了。代码迥然，我们不生产代码，我们只是github的搬运工，搬出来的却实打实的口粮，能面朝大海春暖花开。</p></blockquote>

<h2>1.0 启程</h2>

<p>6月17日踏上了飞往普及的航班，天气不错，亚航多事故心下惴惴，好在一路无事安全降落。120块便办好了入境签证，不过四五分钟，比去隔海相望的香港要来得简单。</p>

<p>出了机场后并没有遇到想象中的热带炎热，反而是略带咸湿的海风吹得遍体通透。想着在深圳每早赶着公交都是一身臭汗，已觉此行不虚，余下便是尽情享受。</p>

<!--more-->


<p>深夜迷糊中听着一场大雨一阵雷，又沉沉睡去。早上醒来巡视一圈住处，不过一个方形小院，老板一直就在左边的尖顶屋子里看书喝茶，我看来寂寞蛋碎的一天不知此人如何熬住。果然如游戏中的NPC，时间对其来说不过一个设定吗？传说中的四维生物，可以在时间线中跳跃。</p>

<h2>2.0 上岛</h2>

<p>普吉岛并没有什么游玩的计划，早上起来吃过早餐就准备着中午的大船去临近的皮皮岛（PhiPhi Island），那里计划住五天，搞定潜水证，算大功告成。</p>

<h4>2.1 岛上下榻</h4>

<p>小岛不大，开发出来的地儿也就仅仅占着几个沙滩而已。也省了许多逛街的麻烦。每天吃的不外是厚牛肉汉堡，刚捞出来的炸鸡和切好的各类披萨，合着啤酒吞下便是一顿。心情好了来碗蛋炒饭算是回忆家乡。</p>

<p><img src="http://sonnewilling.com/images/road/tailand/bear.jpg" alt="image" /></p>

<p>泰国食物是吃不得的，酸里透甜，甜里泛辣，还得捏着米饭沾黄了吧唧的咖喱吃，哀民生之多艰。</p>

<p>岛上的住所也算别致，但仅作远观不可亵玩，里面陈设说得上简谱，想来都是一船船拉来的木板慢慢堆砌出来，也不能苛求多少了。</p>

<p><img src="http://sonnewilling.com/images/road/tailand/hotel02.JPG" alt="image" /></p>

<h4>2.2 西方文化的世界</h4>

<p>晚上漫步沙滩，各处的酒吧都是众人的狂欢，独少见亚裔人的身影。灯光几处不甚亮堂，有玩火的艺人助兴照耀。伴着大功率的歌曲舞动。中间围绕的竟是个甩大绳，也玩得熠熠生辉，轮流上阵不亦乐乎。灯火稍暗处也有几人自顾自high，或站桌上或立沙滩摇头抖肩。回顾自己，斜卧最外一层无人光顾的躺椅上，看似逍遥却羡慕不已，想要融入但不得其法。精神语言上无一不束手束脚，一片白色的世界，却不在热寂之后，置身其中满不是滋味。</p>

<h2>3.0 潜水</h2>

<h4>3.1 PADI与SSI</h4>

<p>一般印象中背着个氧气瓶下水的潜水叫<strong>水肺潜水</strong>，即<strong>SCUBA DIVING</strong>，是“Self-Contained Underwater Breathing Apparatus”各单词的首字母拼起来的，大略意思就是可以自己控制呼吸的潜水方式。</p>

<p>本着下水有风险，游玩需谨慎的出发点，一个未经培训认证的人一般是不允许潜水的。潜水资格的获取要一步步来，从最开始的<strong>OPEN WATER DIVER</strong>即<strong>OW</strong>,慢慢往后有很长的路要走。一个小白若想初步感受水下世界的魅力，第一步要做的是取得最基本的<strong>OW</strong>认证。</p>

<p>世界上有资格进行培训的机构有不少，最出名的要数<strong>PADI</strong>，其次<strong>SSI</strong>也不错。因为休闲潜水的教学标准是一个国际组织制定的，各家机构也都是按照此一规章进行培训，所以有啥差别我现在也看不出来，选择<strong>SSI</strong>的原因只是因为比<strong>PADI</strong>便宜几百块钱罢了。</p>

<h4>3.2 报名，理论与基本技巧学习</h4>

<p>18日下午刚到便去潜水店报名了，SSI最基本的课程，包含理论考试，泳池学习与公开水域学习。最快两天半的课程吧（最后我们用了三天半搞定&hellip;）。</p>

<p>去之前其实也并没有多了解这些理论，也都是随着一步步学习慢慢清晰明了的。一路学来，切身感受最明显的便是这些教学标准的制定相当科学与实用。</p>

<p>之前习惯了为考试而学习的思路，所学与所用之间不觉会有什么共通之处。而在这次学习中，不论从理论的掌握还是基本技巧的教授，都是依着水下生存与活动展开的，可以说直到最后拿到潜水证后，确实很有信心在水下独立活动，并应对一些基本的突发情况。这种喜悦是成功的满足与发现知识可以如此贴切实用欣喜掺杂一起的，尤其兴奋。对比之前驾校的学车，真是天上地下的差别。</p>

<p>头两天是在浅水区域学习基本的潜水与突发情况处理技巧。比如保持在水中的中性浮力通过调整呼吸来达到上浮下潜的目的，或者紧急解除负重上浮及与他人共享气源等等。所有动作都需要教练验证通过方可进行下一节的学习，也算有惊无险了。</p>

<p>倒是第二天的游泳考试带来了不小麻烦。头晚下了场典型的热带暴雨，早上起来后天还是阴阴沉沉，风也不小。待到岸边的时候，浪冲地我们几乎无法入水，便要在这种情况下完成200的游泳。我尚能应付，但身边妹子去年刚刚学会游泳，前两周才在我逼迫下，在泳池里可以一次游一两个来回，着实为她捏了把汗。</p>

<p>后面的考试基本就成了我跟另一位助教妹子全程护航的游泳跋涉。看着小身影在浪涛中乍起乍伏，心想万一有个意外，不知道会不会被她爸一巴掌拍死在墙上，真是后怕不已。</p>

<p>游200m后的另一个考试项目是踩水10分钟，又是一项终极考验，SU尝试了两次都没坚持过两分钟便呛水不已，一度想要退出。教练便先单拉我出去练习水下技巧了，让助教妹子单独辅导踩水的技巧。</p>

<p>大概半个小时后好消息再度传来，这下明天便可以顺利出海，进行公开水域的练习了。</p>

<p>中午饱餐一顿，回来倒头便睡，一下午无话。</p>

<p>傍晚才又整装出门觅食，见有人租个小艇子划着玩，也心痒难耐试了一把，得出的结论是真鸡巴累啊，草。</p>

<p><img src="http://sonnewilling.com/images/road/tailand/boat02.JPG" alt="image" /></p>

<h4>3.3 出海</h4>

<p>21号开始正式出海，后面三天都雷打不动6点出头起床，7点多出海潜水，贼鸡巴健康了。运气也不错，有时候半夜倾盆大雨雷声震天，但转头早上又是烈日当空，水波逐万里。</p>

<p><img src="http://sonnewilling.com/images/road/tailand/diving01.JPG" alt="image" /></p>

<p>第一次外面下海说不紧张是骗你的，临行前还特意吃了片晕船药以防万一。</p>

<p>上船不久便起航出发去附近的小岛，路上教练又跟我们详细描述了这一天的练习项目，因为是第一次出海，所以会有些大块的时间来给我们水下随便游游，听着是蛮有意思的，但无奈还是弦绷着的，笑不大出来。</p>

<p>船泊岛旁，按教练的指导直接跨步入水，刹那间天地昏暗，唯独记得紧咬着呼吸装置。靠着充气的BC慢慢浮上水面后世界又重新出现在眼前，但更加清晰明了，前面的紧张情绪也被这一波带走。</p>

<p>重新下水后的世界又是一番新天地，起初在尚浅的地方做些基本的练习，待看我们渐渐熟悉后便开始带我们逐渐下潜，记得教练还在不远处见到一条小鲨鱼，不过2，3米的样子，比自己想象的要细些，并没有什么特殊的感觉，一条大鱼罢了。</p>

<p>看上去比较危险的反而是珊瑚和水胆，珊瑚一副人畜无害的样子，划过皮肤的感觉却不怎么妙。水胆自不必说，黑色的一个球，外面布满长过本身的尖刺，看上去就不好惹。</p>

<p>渐渐下潜，鱼的种类也多了起来，有些萌萌的胖头鱼，眼睛相当呆气，想起了家里的傻猫，还有环状条纹的水蛇在珊瑚丛中游弋，也亏教练能发现。当然最有趣的还要数小丑鱼，便是海底总动员那只橙色的小鱼，在教练嘴里却是一种比较危险的鱼类，还特意给我示范了了下，迅猛地向教练手心出击，还貌似听到了教练惊呼的声音，力道着实不小。</p>

<p><img src="http://sonnewilling.com/images/road/tailand/diving03.JPG" alt="image" /></p>

<p><img src="http://sonnewilling.com/images/road/tailand/diving02.JPG" alt="image" /></p>

<p>一般一上午下潜两次便告一段落，乘兴而归，恍若隔世。也不过潜了不到20米，对大洋来说皮毛而已，果然是越了解越是敬畏。</p>

<p><img src="http://sonnewilling.com/images/road/tailand/diving06.JPG" alt="image" /></p>

<h4>3.4 领证</h4>

<p>22号中午结束了最后一次潜水课程，幸运的从教练手里拿到了<strong>OW</strong>的潜水资格，一步步考过来很有成就感，一番独特的记忆。</p>

<p>这几天我们都住在岛的中央，之前想着体验下海边的五星级酒店待遇，便在岛的北部定了一晚星级的体验下，于是下午收拾细软又乘船出发了。</p>

<p>事后看来那酒店不过如此，床大点软些而已，唯一印象深刻的是睡觉前看了中央台一个类似人物传记的节目，讲一个奇葩的小gay，爷们的外貌少女的内心，号称很少有人有资格可以嫖到他，一身鸡皮却挪不开眼睛，就着啤酒一直看完&hellip;</p>

<p>第二天早我们还很接地气的雇了个当地的潜导出海玩玩。</p>

<p><img src="http://sonnewilling.com/images/road/tailand/diving04.png" alt="image" /></p>

<p><img src="http://sonnewilling.com/images/road/tailand/diving05.JPG" alt="image" /></p>

<p>中午搭大船离开，结束了5天的PP岛旅程。</p>

<h2>4.0 普吉一日</h2>

<p>23号3，4点到的普吉，租了辆摩托车便又出行。想着好歹来一次试下泰国食物吧，结果还是又去别的地儿补了笼小笼包才算吃饱，已经对其彻底绝望。</p>

<p>第二天一早骑着个小摩托去最近的一个山顶观观景色，出发前揣着张地图信心满满，拐俩弯便彻底掉向，无奈掏出谷歌地图导起航来，娘的。</p>

<p>山不高，摩托可以一路骑到山顶，有个塔楼拾阶而上便可以一览海湾景色，也算可以。停车那里有个小卖部，一位老婆婆看着。商品稀稀疏疏，哧哧剌剌的电视看不大清画面，去到时还在屋后弓腰收拾空矿泉水瓶，半晌直不起腰，蹒跚着过来给我们取东西，唯旁边有只肥猫尚能作乐，不知晚间若何，儿女何在。匆匆下山罢了。</p>

<h2>5.0 归</h2>

<p>不在话下，所喜去也平安，归也平安。小渔村呆久了也是想念大城市的，围城也。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回家过年记]]></title>
    <link href="http://sonnewilling.com/blog/2015/02/18/hui-jia-guo-nian-ji/"/>
    <updated>2015-02-18T16:47:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2015/02/18/hui-jia-guo-nian-ji</id>
    <content type="html"><![CDATA[<h2>车上</h2>

<p>今年的公历与旧历相差不小，深圳天热，裤子都快脱了才将将过年。吃了一年多米饭，很是想念馒头的手感，捏起来必定充盈丰富细泽光滑。</p>

<p>有了工作收入大不比从前，也可以土豪一把舒服的回趟老家。420一位的硬卧可以不是随便就能享受的了的。想着之前偶尔买不到票还要站回去，心下惴惴，特意找了位黄牛代办一切，朝中有人就是不一样。</p>

<p>小小方圆大千世界，套在一节火车皮上再适用不过，硬座尤然。或坐或站挤作一坨，互相客气着，眼神却不离座位。无关礼数教养，干站三个小时任谁都被打回原形。偶尔趁着正主离去，礼貌问下提臀便坐，受力的一刹那从尾椎爆发出来的快感一路烧到喉咙，大概跟喝小烧的顺序相反，如久违的情人相厮相守。</p>

<!--more-->


<p>随着飞机的普及平民化，火车上也渐渐寻不到靓妹的踪影，间或在卧铺车厢觅得一二已属万幸，至于长途的硬座却完全是老爷们儿的领地。利益自然要最大化，说不上什么尊老扶幼，竞争从上车前便开始。首先要考虑的是大件的行李，硬座车厢人多座儿少，行李架也尤其珍贵。上车稍晚头顶的天空全被占领，座位下也是密密麻麻，若还是个站票，抱着行李一路的辛苦double不在话下。若干挤惯长途的老油条还会先买通车站人员提前进站，比大部队早上车5，6分钟。这时候便可以好整以暇，将行李规整齐全，甚至占住列车接驳处的空间自造个铺位也是个常有的事情。</p>

<p>第一次见这种情况可能会嗤之以鼻，到了半夜，你看那桌子座位底下漏出来的人头，洗手间塞满的人群，不禁会向往那接驳处的一角，宁静祥和，宽敞明亮。回家的记忆起于想念，于此酿至最浓烈。</p>

<p>折腾一宿黎明下车，久违的北风沁心凌冽。亚热带的气候温热少嶙角，北去则多了些剽悍之气，如古语“燕赵多有慷慨悲歌之士”，一言以蔽之。</p>

<h2>家中</h2>

<p>出了车站大舅驱车而至，赶着早晨的饭点回到了家中，必然是一顿饺子以飨空腹。姥姥身体一年不如一年，今年回来看走路已很不方便。回想初离家时的健朗，未觉时光在自己身上走过，到底在老人身上看到了影子。</p>

<p>年夜饭菜样式无多花样，满桌的肉类，传闻中的青菜因为气不够了也没炒，星星绿色仅在拌猪耳的凉菜中找见。也亏如此，盘盘硬菜吃起来才够爽快。杯杯见底中扫去风尘，放开来把酒言欢。</p>

<p>今年春晚退居二线，微信红包抢占头条。公司群里搞起红包接龙大战，足球队群也抢个不亦乐乎，捧个手机离不开屏幕。偶然抬头看家里老人还是坐那看着电视，竟有些愧疚，迢迢千里赶回团聚，为了手头几十块的零零碎碎算是知道舍本逐末怎么写的。放下手机陪老人聊聊天过不了多大一会儿却又开始挂念群里发了多少红包，少抢了几份，又切身体验了一把鼠目寸光，就这素质了，着实难改。</p>

<p>年初一照常串门拜年，今年较往年少了很多，约莫此风气这几年中也会渐渐消失，自己尚觉有些遗憾，家中老人却不以为意，说自己在家看看电视就挺好，折腾来回太麻烦。</p>

<h2>酒席</h2>

<p>初一晚上大院里的以前的玩伴聚餐，有两位还领来了家属，传闻年终便要结婚。自己尚是幸福，却苦煞若干待字闺中的女同志。席中敬酒频频大约也都是朝着未来的新郎官，众人也乐得拾柴火焰高，赶着凑热闹。不多会便喝高一位，也算稍解恨意。</p>

<p>约莫到晚上十点才散席，仅有新郎官的娘子没喝酒开了辆车来，拉了几位女同志走，余下我等几位没人管顾。穷乡僻壤大年夜车是不指望打到，慢慢走回去呗。寒风瑟瑟阴雨丝丝，乘着酒意晃晃悠悠的倒也别有一番风味。不料走到一半同行的几位同志还觉腹中空，竟也找到一家小店，仅店主店娘两位，看着电视，快晚上12点的样子，守着个炉子。来盘饺子炒了个茄子也算麻利，便又坐回去看电视了。慢慢吃着解着酒气，想想今晚的行程荒唐却也有趣。临走时又来了一队人马，大概也是散了酒场打不到车。风雨中幸遇如此一酒家真真值得一书。</p>

<h2>送家堂</h2>

<p>这边有请送家堂的习俗。是把家里过世的长辈灵位在过年这几天供出来。年前请来，大年初二送走。送的时候磕头烧纸放鞭炮，供养用的食物晚上家里人吃掉，据说还有福气。</p>

<p>家堂之事由叔叔负责，去到家中最引人注意的便是堂兄养的萨摩，雪白蓬松，虽年年仅春节见一次，倒也熟悉我的气味，每次相别都抱住不放，呼吸相闻，一嘴膻味。</p>

<h2>尾声</h2>

<p>有聚有散，喝了几顿酒后便又到了打包滚蛋的时节。老家的节奏还是一样，表弟领来了女友，要不是属性相克今年便结起婚来，堂兄也各种制备齐全独缺新娘驾到。家里长辈也觉搞定下一辈的婚姻大事算是完成了自己的一桩任务，接下来关起门来过日子便是。</p>

<p>各自有福，不求甚多。来年再喝起来吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[去年今日]]></title>
    <link href="http://sonnewilling.com/blog/2015/01/06/qu-nian-jin-ri/"/>
    <updated>2015-01-06T20:38:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2015/01/06/qu-nian-jin-ri</id>
    <content type="html"><![CDATA[<p><img src="http://sonnewilling.com/images/life/app.png" alt="image" /></p>

<p>14年的最后一天单位要求写篇年终总结，把自己这三个月的工作摘录了下给交上去了，自己这边也再就懒地动笔。待元旦三天腐败回来也完全不再考虑下笔。但今天收到这张图却被狠狠捶到胸口，不吐不快。</p>

<!--more-->


<h2>嘿，初识</h2>

<p>毕业季的回忆算不上难忘，瓜熟蒂落自然分娩。但之前的校招却谈不上愉悦，贪欢三载，还想要找到份满意的工作，失意总是不可少的。却好在并没有太大的灰心，依旧寻寻觅觅。</p>

<p>发了很多Java开发岗，搞定家国企分部，印象中一个月4000+吧，说不上多满意但聊胜于无。却在这时收到XM的面试邀请，我也不记得啥时候投的简历。他们在招iOS开发，我一想，哎，我靠，这划算啊，还没摸过苹果电脑呢，得试试。</p>

<p>XM在海岸城租的写字楼，不大，几个房间而已，但靠着玻璃幕墙，竟也有些高大上的感觉。开头跟我聊的是LU哥，技术这块儿归他管。看大家都是实诚人，我也没好意思瞎扯，先说了自己没做过这方面的开发，但你们敢要的话我也敢做，待遇好谈。貌似最后四字是点睛之笔，之后的谈话都在愉快放松的气氛下完成了。</p>

<p>LU哥这块儿谈得差不多的时候关老板便出场了。穿着件蓝色文化衫，上面都是英文也没看懂，大方脸上胡渣刺着，清瘦结实。听着是北方口音，靠谱！技术上关老板也不懂，聊下三观而已，反正就捡着老板爱听的吹呗，这事儿便成了。</p>

<h2>蜜月</h2>

<p>四月一号入职，当时还觉得这日子不是很好，总得来个黄道吉日吧，也没好意思说。来的第一个早上好好把Mac Mini摸了把，正过来反过去的摸，捧起来这瞅瞅那瞧瞧，十分钟没放手，新鲜是其次，开关键在哪啊，日。</p>

<p>后来还是继续摸索呗，也没人带，LU哥从精神上给我支持大方向上把把关，毕竟他也没做过iOS的开发。</p>

<p>收获很大，之前在实验室做项目的时候，有很多学长在，脏活累活他们顶着，出了问题及时反馈坐等解答，衣来张口饭来伸手。乍一下自己单干是有点虚，但时间久了便慢慢有了些底，反正问题在那是要解决的，慢慢磨总归还是会出现门路。</p>

<p>就这样一路折腾，中间还整个项目重构了一把，9，10月份的时候发了人生中第一个App到App Store。说没有洋洋得意那是骗别人的，分分钟人生赢家的美梦做起来，做程序员真好。</p>

<p>接下来又搞了个Pad版，因为有了前面的经验，做得也更加仔细了，各文件夹的命名照着规范来，每个VC的名字斟酌再斟酌，变量名写得长且美，心中总有个信念，这个App打从我这儿开始便没个头儿，代代相传恒久远，就差没取名叫<code>始App</code>了。</p>

<p>Pad版上线后一度冲到前100，每天查看下统计数据心里都还美美的。</p>

<h2>分手</h2>

<p>奈何蜜月总是短暂的，14年春节回来觉得个人能力有限，不能将手头的东西再提升一个档次，便选择了离开，那时倒没有多大的伤怀，更多的有种武装到位继续前行的自信。也没有想过这段“初恋”的结晶会走向何处，现在收到的这份东西令我发怔，说不上后悔，只是再回头看去好似一场灯旋火舞的狂欢，沉醉不知归路，日升月落间却扫来了一地的残羹冷炙，如何不叫人叹惋。</p>

<p>现在这家公司月末也要搬去新的地点，算上开头离去的公司，按农历年算的话今年一共换了五个工作地点&hellip;离开XM后先去的一家做飞镖机游戏的公司，中间也搬了一次，10月份的时候又换到现在这家公司。也许不单是我的境遇如此，大概现在的软件行业都是如此。快速的行业迭代，公司的生命潜质被发掘到最大，迅速的成长或烟花般陨落，不疯魔不成活。</p>

<h2>第二任</h2>

<p>后面经历的两家公司都令我成长很大。走出XM后的第一家公司虽然以iOS开发招进来的，但缺个后台做聊天服务器的，便顶了上去。也没用现成的开源协议啥的，就直接裸写Socket，一个字符串过去，关键信息逗号隔开，还真是方便省事。中间先是在Mac下开发，后来又迁移到Win下面，工具库也使用了很多，比较常用的是<code>GLib</code>和<code>Libevent</code>。因为之前一直在搞Java开发，C语言相关的知识一直在爪哇国放着，算是重头学起吧。记得光编译这俩工具包加起来都花了我一周的时间。后来迁移到Win下面，整个工程的重新编译又搞了一周。现在看来其实都是一些细节没有把握住，反复的尝试做无用功，一点点给试出来的。可惜当时我们团队也都没有搞这方面的，基本都是Java，OC，PHP高级语言。想起之前有人说过同样年限的C++程序员要比Java的整体高一些，看来不是无稽之谈。</p>

<p>确实，现在高级语言的特性让编程变得简单上手，成熟的IDE也让语言的编译一键完成。不是说这样不好，自动挡开起来肯定比手动挡方便，但相信开手动挡的总归要比自动挡的对汽车的熟悉程度要高些，出了问题也好排查。</p>

<p>因此现在看来，在第二家公司收获最大的便在于此。在学校用过一段时间Java，出来的第一份工作用的也是OC。对底层编译，网络通信，操作系统什么的只有简单书本上的记忆，并没有切身的操作体会。感谢那家公司有如此大的耐心让我慢慢折腾这些东西，边学边做，很宝贵的一段经历，可以说是拿着正式员工的工资做着大学作业&hellip;不知道如果Fei哥看到了会作何感想，哈哈。</p>

<h2>现任</h2>

<p>中间因为几个原因忍痛跟前任分了手，来到现在这家公司。很强大的团队，基本都是些大厂子里出来的高手，算是开了眼界。刚开始是有点不适应的，一直在小作坊作业，乍加入一个成熟的技术团队，会发现自己很多地方都相当业余。最先暴漏出来的毛病是团队作业不熟练，这边产品，设计，测试一条龙，每一步都有人把关。第一次经历App更新时看到四五个人发邮件确认自己负责的部分是否OK，很帅气。其次有了人review自己的代码，刚开始经常会返厂重改，次数多了后渐渐在代码规范这块儿有了自己的体会，知道自己后面有人会检查自己的代码也觉得很安心。另外也有机会查看别人的代码，跟我同组的两个哥儿们技术都比较屌，他们提交的代码都会经常看一下， 看下高手的代码是咋样写的，自己有哪些地方需要学习。开头看的时候云里雾里，一方面是整体编码思维上没有跟上，另一方面是不经常看别人的代码，不知从何入手。看多后便可以慢慢挖东西出来。有些固定的代码块儿可以利用，有些多线程的思路也可以参考，这方面进步很大。</p>

<h2>The Future</h2>

<p>过年回来毕业可以算是两年了，身边的有些同学还在出国深造，也有些组建了自己的小家庭。成熟的社会体系给人提供了更多的选择，庆幸可以在一个比较大的都市里生活，也希望以后有机会能体验其他类型的社会。</p>

<p>读万卷书行万里路，好好学习，天天向上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[台湾流水账]]></title>
    <link href="http://sonnewilling.com/blog/2014/10/08/tai-wan-liu-shui-zhang/"/>
    <updated>2014-10-08T22:35:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2014/10/08/tai-wan-liu-shui-zhang</id>
    <content type="html"><![CDATA[<p>十一出游台湾是一天无聊在街上闲逛的时候敲定的，大概还是在三四月份的时候。第一次办证总免不了有些磕磕碰碰，但好歹也算有惊无险地搞定了。七月初买了去程的机票，待所有证件办齐八月末的时候才开始大张旗鼓的计划起行程，订住宿买回程机票不在话下。六天出游回来，想想还是蛮顺利的，天公作美。</p>

<!--more-->


<h3>Day1-台北</h3>

<h4>2014年10月1日</h4>

<p>没有啥计划，七月份冲着价格随手买了早上9点半香港飞的机票，待真到临走的几天发现九点多的航班实在是个坑。南山这边有个深圳湾口岸，在蛇口港可以直接坐船一个小时直达机场，只要100块而已，但悲剧的是口岸开放时间为早上六点，港口的船只针对10点以后的航班提供口对口的服务，之前的航班是别想了。所以只能趁着夜色五点多打车去皇岗口岸，折腾差不多三个小时，7，8点才到的机场，差点困死，算是吃一堑长一智了。</p>

<p>快11点踏上宝岛，说不上有多兴奋，主要是太困&hellip;日。机场有到市区的大巴，一人2，30而已，座位很是宽敞有点观光车的感觉。晃了一两个小时的样子到了台北车站，再从这里转地铁到住宿的地儿去。这里的地铁叫捷运，不知道怎么起的名字，根本改不了口。</p>

<p>住在西门町商业圈里面的一个民宿，蛮繁华的地儿，还有一条电影街，好多电影院，直接导致了我们当晚连续看了两场电影，哪里也没逛&hellip;</p>

<p>到了住宿的地儿补了会儿早上的觉才出门吃了个炸鸡啤酒，炸鸡还好，台湾啤酒一般，不是很好喝，有点涩。然后就开始看电影了&hellip;4，50一个人，跟深圳差不多，然后回来睡觉，不表。</p>

<h3>Day2-台北</h3>

<h4>2014年10月2日</h4>

<p>今天的正题是泡温泉，也是提前订的，不然到了再找的话可能会悲剧。</p>

<p>早上睡了个饱出门吃了永和大王便往中正纪念馆走。出了地铁看到纪念馆的主楼倒是真够霸气，不知道是不是为了补偿什么，据说喜欢开SUV的都是因为JJ小。</p>

<p>出了馆便直奔温泉往北投走，大概40分钟左右的车程。北投的建筑风格大都比较日式，泡温泉的地儿尤其如此。我们预订的是个叫加贺屋的馆，听说还比较有名。</p>

<p><img src="http://sonnewilling.com/images/road/taiwan/spa.jpg" alt="image" /></p>

<p>订的是个两人的单独房间，里面竟然有个可以喷水洗菊花的马桶，惊喜不已。温泉都没顾得上看，立马体验了下马桶的魅力。可以设置水流的强度跟角度&hellip;怎么说呢&hellip;实在很爽，刚开始会有些紧张，但找好角度调好强度放松身体你会欲罢不能的&hellip;温泉就那样了，一个半钟的时间，我进去泡了总共也就几分钟而已，自己热得不行家里掌柜却尤嫌不足，看她样子也是调好温度放松身体欲罢不能，女生去的话建议带张面膜，据说就完美了。</p>

<p>泡完出来顺便逛了下旁边的温泉博物馆还蛮漂亮的，隔壁是图书馆，相当棒，看攻略说全亚洲都排得上号。确实，环境清幽，还有小松鼠，配上几处地上升起的氤氲的地热气，调好座椅角度放松身体你会欲罢不能的&hellip;</p>

<p><img src="http://sonnewilling.com/images/road/taiwan/library.jpg" alt="image" /></p>

<p>逛完北投时间还早便继续往北去了淡水，好像周董的母校就在旁边。但也没细找，随便沿海岸线走了下逛了逛夜市而已，算是来到台湾后第一次看到海景，倒也不错。晚上又去了师范大学的夜市，那里吃了个类似不放辣椒的麻辣烫，妹子的质量有些提升，毕竟在大学旁边还是不一样的。回到宿舍差不多10点多，又去了趟居酒屋喝了点小酒，其实就是逼格比较高的烧烤摊而已，体验一番罢了。</p>

<h3>Day3-台北-花莲</h3>

<h4>2014年10月3日</h4>

<p>上午退了房急急瞻仰了下国父便搭火车往花莲走。下了火车风还不小有些凉。上了点岁数的老板夫妻开车来接我们去了民宿，已经是下午5点多了。去到后发现他们女儿小老板娘还蛮漂亮的，再加上说话很嗲，住宿的本也算赚了回来。</p>

<p>街角有热闹的葱油饼摊子，不少人排队，试了下很一般，倒不如楼下三块一份的饼子。倒是这里有青岛啤酒，感觉比内地的要爽口一些，不知道是不是水的原因。买三瓶还打折自然不能放过。</p>

<p><img src="http://sonnewilling.com/images/road/taiwan/congyoubing.jpg" alt="image" /></p>

<p>吃完葱油饼便沿着路向东走，继而又发现了一段海岸线，不知道是不是傍晚的原因，风相当的大，大有把人吹跑的气势。但我也毫不示弱，迎风怒尿了一泡，还是三丈的年纪。</p>

<p><img src="http://sonnewilling.com/images/road/taiwan/niao.jpg" alt="image" /></p>

<p>回来将将天黑，发现了一家按脚的馆子&hellip;价钱倒还可以便又腐败了一把，通透。出来又是一顿炸鸡烧烤啤酒，微醺着逛了回去。</p>

<h3>Day4-花莲-垦丁</h3>

<h4>2014年10月4日</h4>

<p>早上拼车从花莲到垦丁，算是一日游。沿途的景色很棒，见到了太平洋的全貌虽然没有小时候第一眼见大海时候的震撼但看着无垠的大洋心里还是感觉到一阵畅快的。</p>

<p><img src="http://sonnewilling.com/images/road/taiwan/hualian.jpg" alt="image" /></p>

<p><img src="http://sonnewilling.com/images/road/taiwan/hualian2.jpg" alt="image" /></p>

<p><img src="http://sonnewilling.com/images/road/taiwan/hualian3.jpg" alt="image" /></p>

<p>大概7点多到的民宿，住的地方出了点小差错，不过老板娘倒很是热情，退了些钱给我们不说还答应明天借摩托车给我们骑，省了租车的费用外比一般的电动要爽得多。然后又拉我们去了垦丁大街，一起的还有两个上海的妹子。路上随便吹了下水。</p>

<p>垦丁大街倒相当一般，加大版的夜市而已，没有什么突出的东西，倒是在这里买了根自拍杆，算是最大的收获了，为后面的旅程增色不少，建议大家以后出去都带着这么一根，很值得。</p>

<p>随便找了家烧烤酒吧吃了喝了点小酒便结束了今天的行程回宿舍睡了，准备第二天的摩托车沿海游。</p>

<h3>Day5-垦丁-高雄</h3>

<h4>2014年10月5日</h4>

<p>起个大早吃完早餐便迫不及待的骑上了摩托车。虽然有些破旧但还是抵挡不住浪漫的情怀，很是兴奋。</p>

<p>单从玩的角度来说，今天算是这几天最爽的了。首先摩托车比一般游客租来的电动要快，而且还不怕没电，一路风驰电掣的超各种小电动好不痛快。另外走的基本都是沿海的公路，没啥车，宽阔明亮，偶尔还有盘山公路顺势而上登高远眺别有风味。</p>

<p>出门七八公里后到了个叫佳乐水的海滩，滩如其名，好水好滩好玩耍。游客不多，三三两两而已，而且大部分都是鬼佬在玩冲浪，像我们这种穿着衣服拍照的基本没有，真是有些丢人，看了下便匆匆走了，下次来台湾的话哪也不去了，就在这里待着天天爬起来冲浪晒太阳，妹的。</p>

<p><img src="http://sonnewilling.com/images/road/taiwan/jialeshui.jpg" alt="image" /></p>

<p>离开海滩稍微折回拐到旁边的岔路过个桥地势便逐渐往上，这时候摩托车的优势便体现了出来，油门一拉丝毫感受不出两人的分量多有影响。顺着坡一直往上，风也逐渐的加大，到一个上坡的终点的时候突然来了一阵妖风夹杂着沙石像是直接拍在了脸上一样，刹那间有些窒息，好在够重倒没有人仰马翻，就这样我们来到了下一个景点，风吹沙&hellip;想必起这个名字的人也是被这妖风拍地够呛才憋出了这个名字。</p>

<p>拍照留念后便赶紧下撤，站在崖边真有种要被吹进海里的感觉，马虎不得。下来的路上一阵开阔，加之刚刚的海风，人也清爽了很多。不自觉地速度便提了起来，好在道路笔直不见行人车辆，左手边就是辽阔的太平洋，竟有种恍若隔世的感觉，让我想起了肖申克救赎里面最后相聚的那个画面。</p>

<p>往前走不到半个小时来到一片草原，刚刚还飞沙走石的现在却是绿草油油清风拂面。这里的游客便多了起来，沿路上都有大巴车停着，一票游客聚在远处的一个崖边拍照，嫌人多也就没进去带上头盔直接走人了。</p>

<p>再往前的几处景点人也不少也无甚可说，跳过不表。</p>

<p>下午一两点的时候到了白沙湾，水很清澈大概是下图的程度。所以虽然出门的时候完全没有游泳的计划到了这里还是忍不住下了水。浪还不小，游泳啥的基本没戏，都是在边上逐浪的。租了个泳圈，随着一波一波的海浪玩得不亦乐乎。最后屁股都被沙子磨得生疼才恋恋不舍的爬了出来。租了个位置买了几罐啤酒开始晒太阳，差不多全身干爽后收拾离去。</p>

<p><img src="http://sonnewilling.com/images/road/taiwan/fanchuanshi.jpg" alt="image" /></p>

<p>因为4点半要回到民宿，所以从白沙湾出来后剩下的路程也没做过多停留，一路骑回算是过足了摩托车的瘾。</p>

<p>回来稍作停顿便上了开往高雄的巴士，中途还吃了个生的槟榔，初入口极涩极苦，差点要吐出来，把开头的几口浓汁吐出来后稍微好了一些，继而便是头晕目眩，大概是喝了两三瓶啤酒的感觉，所以妹子出门还是要切记不要瞎吃东西，搞不好就被人抱走了。我那颗槟榔是个路边的大妈给的，想来应该不会有啥危险&hellip;</p>

<p>天黑到的高雄，顺便买了第二天5点开去台中的车票。晚上就随便逛逛帮朋友买东西之类的不表。倒是在一条比较暗的街道上有个大院，里面不知供着哪位大仙，门口高挑着四五盏大红的灯笼，一些横幅对联之类也都是繁体字写着，别样的感觉从心头升起&hellip;</p>

<p>回到宿舍喝着啤酒看香港的占中。自己不用上课倒是轻松，消耗着商家的钱来谋求自己的政治福利，想想也是大学生能干出来的事情。本来还想坐等深夜清场直播，也没有坚持住，躺下睡去。</p>

<h3>Day6-高雄-台中</h3>

<h4>2014年10月6日</h4>

<p>上午起来11点多退了房将行李寄存在车站便往西子湾前行。出了地铁站直接打车到了国立中山大学，样式倒还古朴，比邻着大洋得天独厚。天气已不是很热，在一个大的庭院坐下买了杯奶茶还试了下现烤的奶酥厚片相当不错，加起来才7块而已，相比夜市里的七七八八不知道强多少倍。</p>

<p>吹风的空聊起了晚上几点能回来的问题，我印象中是11点多的飞机，我家掌柜问具体几点我也记不清便查了起来。行程单翻出来一看竟然是9：05起飞，瞬间有些斯巴达，到香港也才10点多为毛我能记成11点的飞机，我日。</p>

<p>一阵慌乱往外跑，那一段海岸线显得那么的漫长没有尽头，清幽的校园他妈连辆出租车也没有，大爷的，一身臭汗。</p>

<p>两点多赶到车站说要退掉5点的车票又问最早有几点的，幸运的是两点半正好有一班一样的，直接换了票便往月台奔。又不自觉地想为毛等火车的地方都叫月台。岔神的空家里掌柜也不知踪影，焦心等待后发现挎着个大包捧着一盒便当出现了&hellip;步履蹒跚一摇一晃让我想起了朱自清的背影，可惜全无心情。说台湾火车的便当闻名遐迩，抓住最后的机会要尝试一番，我也是醉了。</p>

<p>刚到月台列车便来了，这边的车靠站时间都很短，差不多上完客不怎么停留便直接开走，也算万幸赶上，毕竟去台中尚要两个半钟，再从车站去机场又要一个小时，要是坐5点的那趟班车那真是呜呼哀哉了。</p>

<p>台中的记忆便是在公车上一晃一晃，正值放学时段，听着学生们车上叽叽喳喳遥想当年。</p>

<p>机场不大，航班也少，看电子牌好像我们还是当晚的最后一班，可以想象如果我们九点多才到机场的话面对着一片乌起码黑心中会多么乱马奔腾。</p>

<p>半夜三点多才回到家中，台湾之行便在这紧密充实中度过了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[秋思]]></title>
    <link href="http://sonnewilling.com/blog/2014/09/23/qiu-si/"/>
    <updated>2014-09-23T15:16:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2014/09/23/qiu-si</id>
    <content type="html"><![CDATA[<blockquote><p>我说那儿黑，他说他恨日光。我说那儿很孤独，他说跟聪明人说话是滥用他的心智。我说他疯了，他说上帝留他不必做精神健全的人（上帝一定会的）。</p></blockquote>

<p>海鸥过境，雨很是磅礴地下了几天，本以为走后便又会迎来高阳烈日，出乎意料的，风中带有了丝丝凉意。</p>

<p>就像一个力竭的汉子，最后的时光里每经受多一次打击都越发难以恢复之前的意气。</p>

<p>在深圳这种南方城市很难感受落寞的秋意，不像北方的寒地，叶子吸收了暑气而发黄飘落，风不请自来，很有股迫不及待的劲儿要补回夏日的缺席。而在回归线这里，点点的秋意好似害羞的姑娘，生怕被你发现，偷偷掩在夏日的身后，趁着衣角的翻起一下跑向冬天的怀抱，如果不仔细观察你都不会意识到她的存在，颇有些倚门回首嗅青梅的神态。</p>

<!--more-->


<p>前几天早上起来去吃肠粉，凉风一阵，才惊觉她的到来，已经忘记上次干爽地走在路上是什么时候了，低头看了下脚上的拖鞋想起来有大半年没有感受过袜子的温暖不禁有小小的期待。也忍不住的想起了那句：</p>

<blockquote><p>快哉此风！</p></blockquote>

<p>暑气一吐而尽，好不爽快。</p>

<p>气候的变迁总能引起人的思想躁动，秋天尤甚，你看诗词中写秋日秋思的不计其数。所以我想大概所谓的情怀秋思都是需要大力气的，夏日抽身离去真空了我们一段气力而开动大脑。</p>

<p>由此看来，秋天实在是大自然给予我们的一份珍贵礼物。它解放了我们有些许定式或僵化的大脑，让大脑腾出空间去天马行空一下。</p>

<p>时光匆匆，回头看一下自己，好像做了很多又好像在原地踏步做流水线上的工作，并没有一粒粒闪亮的珍珠镶在我们这段时间走过的道路上。那看不饶人的岁月，是否有一丝恐慌袭上心头。</p>

<p>其实这种情形还是蛮正常的，我称它为思想的懒惰。这个思想的懒惰跟一般意义上的懒惰有些许不同。毕竟一些主动谋求的偷懒正是科技发展的源泉。而这里思想的懒惰好比肌肉重复动作多了后有它的肌肉记忆一样，是一种定式。这种定式相信对大多数人都不陌生，悄悄的，时间一久它就会找上我们却毫不察觉。待突然发现大概也是一种不知几世几年，不知有汉无论魏晋的桑田感概，甚至想咒骂一句“<em>索性再扔些破铜烂铁，让它烂成一沟绿酒</em>”。</p>

<p>所以这一阵秋意吹去了我们多少雾霾。但这只是大自然的偶然馈赠，若只求如此其它平凡的日子又如何度过。在我看来思想的灵动便是大脑中的一阵阵秋意，它带给我们的才是长久的喜悦与自信。</p>

<p>你让我展示一下这种灵动，我连开口的权力都没有，但我知道去哪里寻找。</p>

<p>看崔护的这首诗，</p>

<blockquote><p>去年今日此门中,人面桃花相映红</p>

<p>人面不知何处去,桃花依旧笑春风</p></blockquote>

<p>简单的桃花融合进他的思念，美好的景象跃然纸上，让人一遍遍回味。</p>

<p>我还很喜欢杜甫的《江南逢李龟年》中的那句，</p>

<blockquote><p>正是江南好风景，落花时节又逢君</p></blockquote>

<p>是一种长久的期待照进了现实，不忍卒读。</p>

<p>纵时隔千年，拾起来读上口后心中还是一阵跳动。穿过了历史的尘埃这诗句的力量丝毫未减，相反，却在厚厚的水泥城市中越发闪耀光芒。</p>

<p>再看一段季老的日记，</p>

<blockquote><p>1932年12月1日 过午看同志成中学赛足球和女子篮球。所谓看女子篮球者实在就是去看大腿。说真的，不然的话，谁还去看呢？</p>

<p>12月21日 看清华对附中女子篮球赛。说实话，看女人打篮球，其实不是去看篮球，是在看大腿。附中女同学大腿倍儿黑，只看半场而反。</p>

<p>1934年5月10日，晚上，有人请客，在合作社喝酒，一直喝到九点，我也喝了几杯。以后又到王红豆（即王岷源，红豆乃混蛋的对音）屋去闲聊，从运动扯起，一直扯到女人，女人的性器官，以及一切想象至辞，于是皆大欢喜，回屋睡觉。</p>

<p>今天（5月17日）看了一部小说，《石点头》，短篇的，描写的并不怎么秽亵，但不知为什么，总容易引起我的性欲。我今生没有别的希望，我只希望，能多日几个女人，（和）各地方的女人接触。</p></blockquote>

<p>跟之前推辞国学大师的季老相比，这一份日记里的形象着实更鼓舞人心。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VC USB 串口通信]]></title>
    <link href="http://sonnewilling.com/blog/2014/08/11/vc-usb-chuan-kou-tong-xin/"/>
    <updated>2014-08-11T11:03:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2014/08/11/vc-usb-chuan-kou-tong-xin</id>
    <content type="html"><![CDATA[<h2>楔子</h2>

<p>前段时间搞完了聊天服务器后也没有很多事情，因为系统瓶颈停留在数据库读写层面，所以研究了一两周的NOSQL和Cache。NOSQL快是快但key-value型的数据结构实在太过简单，感觉真用起来并不是很方便，Cache倒相对来说可行一些，开多一个服务罢了，其实简单的逻辑自己也能实现。就这样纠结来纠结去的，发现其实现在的服务倒也完全够用，压力测试了下，能撑到1500的并发，想来刚上线估计也最多几百号人能同时聊天就不错了，所以就先研究至此，撑不住了再换，不要过早优化嘛。</p>

<!--more-->


<p>就这样决定先找别的事做做，恰好项目里有需要用到Flash的ANE技术来实现Flash与硬件通信，Flash自然不会写，但用VC进行串口通信打包成DLL给Flash调用这个还是可以研究下的。</p>

<p>ANE这里就不再细谈，大体上就是Flash中调用其它语言的一种技术，通过它可以实现一些Flash做不到的东西，比如说底层通信啥的。这里主要讲USB串口通信这一块儿。</p>

<p>串口通信翻了下书发现还是有很多标准的，而现行最流行的就是USB了，所以在网上关于此的资料还是很好找的。</p>

<p>这篇文章的内容主要由三个部分组成：</p>

<ol>
<li>串口连接的建立与简单阻塞通讯</li>
<li>通过API调用自动查询当前插入的USB设备并建立连接</li>
<li>区别于简单阻塞的通讯方式，如重叠IO与事件通知</li>
</ol>


<h2>一，建立连接与阻塞通讯</h2>

<p>在WIN下面，对于串口一类的硬件设备也是认定为文件的一种，所以也可以使用文件的方式来创建打开使用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">HANDLE</span> <span class="n">h_com</span> <span class="o">=</span> <span class="n">CreateFile</span><span class="p">((</span><span class="n">LPCWSTR</span><span class="p">)</span><span class="s">&quot;COM4&quot;</span><span class="p">,</span>   <span class="c1">//设备名</span>
</span><span class='line'>                  <span class="n">GENERIC_READ</span> <span class="o">||</span> <span class="n">GENERIC_WRITE</span><span class="p">,</span> <span class="c1">//访问模式，可同时读写</span>
</span><span class='line'>                  <span class="mi">0</span><span class="p">,</span>                             <span class="c1">//共享模式，0表示不共享</span>
</span><span class='line'>                  <span class="nb">NULL</span><span class="p">,</span>                          <span class="c1">//安全性设置，一般使用NULL</span>
</span><span class='line'>                  <span class="n">OPEN_EXISTING</span><span class="p">,</span>                 <span class="c1">//该参数表示该设备必须存在否则创建失败，串口通讯需此设置</span>
</span><span class='line'>                  <span class="n">FILE_ATTRIBUTE_NORMAL</span>
</span><span class='line'>                  <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>首先初始化一个句柄<code>h_com</code>，让它指向所要打开设备的串口号，之后对该设备的所有操作均需通过该句柄来执行。</p>

<p>之后便是对此串口的一些基本设置，</p>

<h4><em>超时选项</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*设置串口的超时时间，均设为0，表示不使用超时限制*/</span>
</span><span class='line'><span class="n">COMMTIMEOUTS</span>  <span class="n">CommTimeouts</span><span class="p">;</span>
</span><span class='line'><span class="n">CommTimeouts</span><span class="p">.</span><span class="n">ReadIntervalTimeout</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">CommTimeouts</span><span class="p">.</span><span class="n">ReadTotalTimeoutMultiplier</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">CommTimeouts</span><span class="p">.</span><span class="n">ReadTotalTimeoutConstant</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">CommTimeouts</span><span class="p">.</span><span class="n">WriteTotalTimeoutMultiplier</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">CommTimeouts</span><span class="p">.</span><span class="n">WriteTotalTimeoutConstant</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">SetCommTimeouts</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">CommTimeouts</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4><em>DCB参数配置</em></h4>

<p>因为DCB结构体中选项较多，故一般的配置方式是先通过<code>GetCommState</code>获取默认的DCB配置选项，再根据个人需求进行相应的修改。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*将ANSI字符串转换为UNICODE字符串*/</span>
</span><span class='line'><span class="n">DWORD</span> <span class="n">dwNum</span> <span class="o">=</span> <span class="n">MultiByteToWideChar</span><span class="p">(</span><span class="n">CP_ACP</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">szDCBparam</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="kt">wchar_t</span> <span class="o">*</span><span class="n">pwText</span> <span class="o">=</span> <span class="n">new</span> <span class="kt">wchar_t</span><span class="p">[</span><span class="n">dwNum</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">MultiByteToWideChar</span><span class="p">(</span><span class="n">CP_ACP</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">szDCBparam</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">pwText</span><span class="p">,</span> <span class="n">dwNum</span><span class="p">))</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">bIsSuccess</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="cm">/*获取当前串口配置参数，并且构造自定义DCB参数*/</span>
</span><span class='line'><span class="n">bIsSuccess</span> <span class="o">=</span> <span class="n">GetCommState</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dcb</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">BuildCommDCB</span><span class="p">(</span><span class="n">pwText</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dcb</span><span class="p">);</span>
</span><span class='line'><span class="cm">/*开启RTS flow控制*/</span>
</span><span class='line'><span class="n">dcb</span><span class="p">.</span><span class="n">fRtsControl</span> <span class="o">=</span> <span class="n">RTS_CONTROL_ENABLE</span><span class="p">;</span>
</span><span class='line'><span class="n">dcb</span><span class="p">.</span><span class="n">fRtsControl</span> <span class="o">=</span> <span class="n">RTS_CONTROL_ENABLE</span><span class="p">;</span>
</span><span class='line'><span class="n">dcb</span><span class="p">.</span><span class="n">fBinary</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
</span><span class='line'><span class="n">dcb</span><span class="p">.</span><span class="n">fParity</span> <span class="o">=</span> <span class="n">TRUE</span><span class="p">;</span>
</span><span class='line'><span class="n">dcb</span><span class="p">.</span><span class="n">ByteSize</span> <span class="o">=</span> <span class="mi">8</span><span class="p">;</span>
</span><span class='line'><span class="n">dcb</span><span class="p">.</span><span class="n">Parity</span> <span class="o">=</span> <span class="n">ODDPARITY</span><span class="p">;</span>
</span><span class='line'><span class="n">dcb</span><span class="p">.</span><span class="n">StopBits</span> <span class="o">=</span> <span class="n">ONESTOPBIT</span><span class="p">;</span>
</span><span class='line'><span class="n">delete</span><span class="p">[]</span> <span class="n">pwText</span><span class="p">;</span>
</span><span class='line'><span class="n">SetCommState</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dcb</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4><em>清空缓冲区</em></h4>

<p>对句柄进行了一系列操作，保险起见清空一下缓冲区。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">PurgeComm</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="n">PURGE_RXCLEAR</span> <span class="o">|</span> <span class="n">PURGE_TXCLEAR</span> <span class="o">|</span> <span class="n">PURGE_RXABORT</span> <span class="o">|</span> <span class="n">PURGE_TXABORT</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如此，一个完整的串口句柄就构造完毕了。接下来是进行阻塞读的测试。</p>

<p>首先，我们可以使用<code>ClearCommError</code>这个方法获取当前读缓冲区里的数据大小，通过轮询的方式阻塞在这里，当缓冲区里有数据的时候我们再进行下一步的动作。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">get_dirty_len</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">DWORD</span> <span class="n">dwError</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">COMSTAT</span>  <span class="n">comstat</span><span class="p">;</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">comstat</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">COMSTAT</span><span class="p">));</span>
</span><span class='line'>  <span class="n">UINT</span> <span class="n">BytesInQue</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">ClearCommError</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwError</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">comstat</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">BytesInQue</span> <span class="o">=</span> <span class="n">comstat</span><span class="p">.</span><span class="n">cbInQue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当有数据到来便可以直接读取了：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">while</span><span class="p">(</span><span class="n">h_comm</span><span class="o">-&gt;</span><span class="n">is_working</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">get_dirty_len</span><span class="p">();</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">len</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">Sleep</span><span class="p">(</span><span class="n">SLEEP_TIME_INTERVAL</span><span class="p">);</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">recv</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">recv_len</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ReadFile</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="n">recv</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">recv_len</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>写与读类似</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">WriteFile</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="n">send</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">send_len</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上，一个简单的阻塞串口读写Demo便完成了。</p>

<h2>二，检测查询插入的USB设备信息</h2>

<p>因为是Flash直接对DLL调用进行设备连接，所以在C层面需要主动获取连接上的端口名建立连接，并将连接设备的信息返回给Flash调用者，故需要使用另一组工具完成任务。</p>

<p>在WIN下面有一组API可以完成此项功能：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SetUpAPI</span>
</span></code></pre></td></tr></table></div></figure>


<p>摸索<code>setupapi</code>的使用方法着实费了些力气，归结起来主要有两点</p>

<ol>
<li>英文阅读能力不足，MSDN上面说明的使用方法并没有深刻理解</li>
<li>整体知识把握不足，摸着石头过河，边试边蒙</li>
</ol>


<p>说到底还是要多看书，多读英文资料，大体结构把握了也知道从何下手，而且国内博客的资源大多抄来抄去，并没有多关注其所以然，代码贴来贴去，试着心烦远不如一点一点学起来得畅快。</p>

<p>言归正传，获取端口信息依旧要从句柄入手。</p>

<h4><em>1.借助API获取某一类设备的相关信息</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">HDEVINFO</span> <span class="n">hDevInfo</span> <span class="o">=</span> <span class="n">SetupDiGetClassDevsA</span><span class="p">(</span>
</span><span class='line'>      <span class="p">(</span><span class="n">LPGUID</span><span class="p">)</span><span class="o">&amp;</span><span class="n">GUID_DEVCLASS_PORTS</span><span class="p">,</span>
</span><span class='line'>      <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="n">DIGCF_PRESENT</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于<code>LPGUID</code>可以自己初始化，一般的普通设备系统也提供了宏定义，可以看到我这里使用了<code>GUID_DEVCLASS_PORTS</code>，指明需要获取的是<code>PORT</code>（COM端口）一类的设备信息。</p>

<h4><em>2.遍历连接设备，获取设备信息</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">char</span> <span class="n">szBuf</span><span class="p">[</span><span class="n">MAX_PATH</span><span class="p">];</span>
</span><span class='line'><span class="n">ZeroMemory</span><span class="p">(</span><span class="n">szBuf</span><span class="p">,</span> <span class="n">MAX_PATH</span><span class="p">);</span>
</span><span class='line'><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">SP_DEVINFO_DATA</span>   <span class="n">spDevInfoData</span> <span class="o">=</span> <span class="p">{</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">SP_DEVINFO_DATA</span><span class="p">)</span> <span class="p">};</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">SetupDiEnumDeviceInfo</span><span class="p">(</span><span class="n">hDevInfo</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">spDevInfoData</span><span class="p">);</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">id</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">port</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="mi">10</span> <span class="o">*</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">));</span>
</span><span class='line'>  <span class="c1">//get ID</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">SetupDiGetDeviceInstanceId</span><span class="p">(</span><span class="n">hDevInfo</span><span class="p">,</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">spDevInfoData</span><span class="p">,</span> <span class="p">(</span><span class="n">PWSTR</span><span class="p">)</span><span class="n">szBuf</span><span class="p">,</span> <span class="n">MAX_PATH</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">dest</span><span class="p">[</span><span class="n">MAX_PATH</span><span class="p">];</span>
</span><span class='line'>      <span class="n">ZeroMemory</span><span class="p">(</span><span class="n">dest</span><span class="p">,</span> <span class="n">MAX_PATH</span><span class="p">);</span>
</span><span class='line'>      <span class="n">get_str</span><span class="p">(</span><span class="n">szBuf</span><span class="p">,</span> <span class="n">dest</span><span class="p">);</span>
</span><span class='line'>      <span class="n">get_id</span><span class="p">(</span><span class="n">dest</span><span class="p">,</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">ZeroMemory</span><span class="p">(</span><span class="n">szBuf</span><span class="p">,</span> <span class="n">MAX_PATH</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//get port</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">SetupDiGetDeviceRegistryProperty</span><span class="p">(</span><span class="n">hDevInfo</span><span class="p">,</span>
</span><span class='line'>      <span class="o">&amp;</span><span class="n">spDevInfoData</span><span class="p">,</span> <span class="n">SPDRP_FRIENDLYNAME</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="p">(</span><span class="n">PBYTE</span><span class="p">)</span><span class="n">szBuf</span><span class="p">,</span> <span class="n">MAX_PATH</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="kt">char</span> <span class="n">dest</span><span class="p">[</span><span class="n">MAX_PATH</span><span class="p">];</span>
</span><span class='line'>      <span class="n">ZeroMemory</span><span class="p">(</span><span class="n">dest</span><span class="p">,</span> <span class="n">MAX_PATH</span><span class="p">);</span>
</span><span class='line'>      <span class="n">get_str</span><span class="p">(</span><span class="n">szBuf</span><span class="p">,</span> <span class="n">dest</span><span class="p">);</span>
</span><span class='line'>      <span class="n">get_com</span><span class="p">(</span><span class="n">dest</span><span class="p">,</span> <span class="n">port</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">coms</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">port</span><span class="p">);</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">vids</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">id</span><span class="p">);</span>
</span><span class='line'>  <span class="o">*</span><span class="n">len</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SetupDiEnumDeviceInfo</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个函数通过<code>Index</code>进行依次查找设备，若设备不存在则返回空终止遍历。</p>

<p>所以在最后我们可以通过初始化的句柄<code>hDevInfo</code>与遍历出来的设备信息<code>spDevInfoData</code>来查找我们想要获取的具体信息。</p>

<h2>三，重叠IO与事件通知</h2>

<h3>重叠IO</h3>

<p>重叠IO解决的是受IO性能的影响不能第一时间将预期的字节数全部读完必须时阻塞等待在<code>ReadFile</code>，待全部数据传输完毕才返回的问题。</p>

<p>简单说来便是假如我想读1000个字节的数据从串口设备，但当前传输速度只有100K/S，那岂不是要在<code>ReadFile</code>上阻塞10s才会返回？正常情况下是这样的，而重叠IO便是解决此一问题的正确方法。</p>

<p>它的大体思路是当主线程第一时间没有从<code>ReadFile</code>中读出预期的字节数后便立即返回<code>FALSE</code>，继续其它操作，另一方面会在后台单开一个线程执行读取操作，真正读取完毕后再返回主线程进行相应的逻辑处理。</p>

<p>下面看详细步骤：</p>

<h4><em>1.句柄设置为可重叠模式</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">HANDLE</span> <span class="n">h_com</span> <span class="o">=</span> <span class="n">CreateFileA</span><span class="p">(</span><span class="n">port</span><span class="p">,</span>
</span><span class='line'>      <span class="n">GENERIC_READ</span> <span class="o">|</span> <span class="n">GENERIC_WRITE</span><span class="p">,</span>
</span><span class='line'>      <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nb">NULL</span><span class="p">,</span>
</span><span class='line'>      <span class="n">OPEN_EXISTING</span><span class="p">,</span>
</span><span class='line'>      <span class="n">FILE_ATTRIBUTE_NORMAL</span> <span class="o">|</span> <span class="n">FILE_FLAG_OVERLAPPED</span><span class="cm">/*可重叠模式*/</span><span class="p">,</span>
</span><span class='line'>      <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4><em>2.使用可重叠模式进行读取</em></h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">DWORD</span> <span class="n">dwRes</span><span class="p">,</span> <span class="n">deRead</span><span class="p">;</span>
</span><span class='line'><span class="kt">char</span> <span class="n">cRecved</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'><span class="kt">int</span> <span class="n">BytesRead</span><span class="p">;</span>
</span><span class='line'><span class="n">OVERLAPPED</span> <span class="n">ol</span><span class="p">;</span>
</span><span class='line'><span class="n">ol</span><span class="p">.</span><span class="n">Offset</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">ol</span><span class="p">.</span><span class="n">OffsetHigh</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">ol</span><span class="p">.</span><span class="n">hEvent</span> <span class="o">=</span> <span class="n">CreateEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">ReadFile</span><span class="p">(</span><span class="n">m_hComm</span><span class="p">,</span> <span class="n">cRecved</span><span class="p">,</span> <span class="n">len</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">BytesRead</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ol</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">//success!</span>
</span><span class='line'><span class="p">}</span> <span class="k">else</span> <span class="p">{</span> <span class="c1">//无法第一时间读出数据</span>
</span><span class='line'>  <span class="n">dwRes</span> <span class="o">=</span> <span class="n">WaitForSingleObject</span><span class="p">(</span><span class="n">ol</span><span class="p">.</span><span class="n">hEvent</span><span class="p">,</span> <span class="mi">5000</span><span class="p">);</span><span class="c1">//设置5s超时</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dwRes</span> <span class="o">==</span> <span class="n">WAIT_OBJECT_0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">GetOverLappedResult</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ol</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwRead</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//操作失败，使用GetLastError获取失败信息</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">//操作成功，数据读出并存入cRecved数组中</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这便是一个可重叠IO的简单示例，可以看出当<code>ReadFile</code>返回<code>FALSE</code>后，我们通过<code>OVERLAPPED</code>结构体获取该操作的事件，并通过<code>WaitForSingleObject</code>来等待异步线程读操作的完成，然后通过<code>GetOverLappedResult</code>验证下最终读取的字节数，便算完成了。</p>

<h3>事件通知</h3>

<p>在一般的通信情景中，大多是有个线程一直等待消息的到来然后进行读取。在开篇的例子中我使用的是简单的睡眠轮询的方式，但在真实地应用场景中这样做显然是不符合实际的，于是便需要使用基于事件通知的方式。</p>

<p>既然是事件监听，那第一步需要做的便是添加事件监听事件，这一步是通过对句柄的设置来完成的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">SetCommMask</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="n">EV_RXCHAR</span> <span class="o">|</span> <span class="n">EV_TXEMPTY</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>EV_RXCHAR</code>表示一旦有字节到来便触发事件，<code>EV_TXEMPTY</code>表示缓冲区为空的时候触发事件。</p>

<p>接下来便是对此事件进行监听，并在事件到来时将数据读出：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">while</span> <span class="p">(</span><span class="n">is_running</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">COMSTAT</span> <span class="n">ComStat</span><span class="p">;</span>
</span><span class='line'>  <span class="n">DWORD</span> <span class="n">dwRes</span><span class="p">,</span> <span class="n">dwMask</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ZeroMemory</span><span class="p">(</span><span class="n">myChar</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>  <span class="n">OVERLAPPED</span> <span class="n">ol</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//创建等待事件</span>
</span><span class='line'>  <span class="n">ol</span><span class="p">.</span><span class="n">hEvent</span> <span class="o">=</span> <span class="n">CreateEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">WaitCommEvent</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwMask</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ol</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//对该事件进行等待</span>
</span><span class='line'>  <span class="n">dwRes</span> <span class="o">=</span> <span class="n">WaitForSingleObject</span><span class="p">(</span><span class="n">ol</span><span class="p">.</span><span class="n">hEvent</span><span class="p">,</span> <span class="mi">1000000</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dwRes</span> <span class="o">==</span> <span class="n">WAIT_OBJECT_0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">dwMask</span> <span class="o">&amp;</span> <span class="n">EV_RXCHAR</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">rol</span><span class="p">.</span><span class="n">hEvent</span> <span class="o">=</span> <span class="n">CreateEvent</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>          <span class="kt">char</span> <span class="n">str</span><span class="p">[</span><span class="mi">20</span><span class="p">];</span>
</span><span class='line'>          <span class="n">ZeroMemory</span><span class="p">(</span><span class="n">str</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
</span><span class='line'>          <span class="n">DWORD</span> <span class="n">dwRead</span><span class="p">;</span>
</span><span class='line'>          <span class="n">DWORD</span> <span class="n">dwErrors</span><span class="p">;</span>
</span><span class='line'>          <span class="n">COMSTAT</span> <span class="n">Rcs</span><span class="p">;</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">i</span><span class="p">;</span>
</span><span class='line'>          <span class="c1">//获取缓冲区字节数量</span>
</span><span class='line'>          <span class="n">ClearCommError</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwErrors</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Rcs</span><span class="p">);</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">Rcs</span><span class="p">.</span><span class="n">cbInQue</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">if</span> <span class="p">(</span><span class="n">ReadFile</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">str</span><span class="p">,</span> <span class="n">Rcs</span><span class="p">.</span><span class="n">cbInQue</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">dwRead</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">rol</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d-%d-%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">Rcs</span><span class="p">.</span><span class="n">cbInQue</span><span class="p">,</span> <span class="n">dwRead</span><span class="p">,</span> <span class="n">str</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>              <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;error</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>              <span class="p">}</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">PurgeComm</span><span class="p">(</span><span class="n">h_com</span><span class="p">,</span> <span class="n">PURGE_RXCLEAR</span> <span class="o">|</span> <span class="n">PURGE_TXCLEAR</span> <span class="o">|</span> <span class="n">PURGE_RXABORT</span> <span class="o">|</span> <span class="n">PURGE_TXABORT</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上便是事件触发式读取的基本使用方法，需要注意的是，事件触发IO可以搭配重叠IO进行使用，以获得更好的效果。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[阿勒泰的角落]]></title>
    <link href="http://sonnewilling.com/blog/2014/08/02/a-le-tai-de-jiao-luo/"/>
    <updated>2014-08-02T15:05:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2014/08/02/a-le-tai-de-jiao-luo</id>
    <content type="html"><![CDATA[<p>论坛闲逛的时候无意间看见有人推荐李娟的书，清新平淡之类的赞美之词倒是没有在意，单看书名中的阿勒泰便足够将我吸引。</p>

<p>之前很喜欢一位讲新疆的作家是刘亮程，记得初中还是高中学过他得一篇课文叫《一个人的村庄》，明明很有记忆的事情，问了很多同学硬是一个有印象的都没有，奇怪了去。</p>

<p>那里面他写的寒冷尤其生动，说再旺的炉火也抽不走骨头根子里一年年积攒起来的寒意。几乎第一眼便喜欢上了。文章只是他散文集里的一篇，便找了整个册子从头看起，讲他的无聊孤独，地老天荒，看了进去抬头看周围竟有些回不过劲儿来，真好。</p>

<!--more-->


<p>再次拾起他的书是大二的暑假将近，心中躁动不安，很想出去走一遭。</p>

<p>西南已走过，目标便很自然地定在了西北。攻略可以舍去，人文地理还是要了解一下的。看了几本寡而无味的历史地理册子后就想起了刘。图书馆搜作者竟发现了之前没看过的《库车行》，按图索骥找来的还是一本配有彩图的书，欢喜不已。</p>

<p>书不大一晚卒读，又是一段新的旅程。就讲他在库车的见闻，缓慢却不乏规律。看到的好似尘土飞扬大饼烤馕，用心细视却如静静地流淌在暗河里的精灵，一个个生动亲切，便喜欢上了那里，心想一定要去看一看。</p>

<p>之前也看过对刘的评价，说当年他也着实掀起了一股浪潮，但很多大家对他的评论指责说他刻意将文字洗白，略去了很多现实的东西，只将读者想要的东西精雕细琢后呈现出来，又因为功力不凡，这种精雕并不是辞藻的堆砌反而是层层的剥茧，大白话一般的文章让人爱不释手。初看很不服气，但回过头来也确实有些嫌疑，书中是他，但感觉作为一个人，活得也有些虚幻与白净，很有些王小波《红拂夜奔》里的人物，但人家那是小说，毕竟说得过去。</p>

<p>而李娟的出现却打破了我的顾虑。两者给了我一样的体验，令我不禁往下想去新疆的辽阔戈壁的确赋予了生活在那里的人们不一样的视角，再以我们这些车水马龙的价值观来评价有失公允。</p>

<p>暑假到底去了西北一趟，带着单车坐火车到兰州，伴着拉面一路西行，在敦煌的莫高窟努力挖掘自己的艺术细胞但还是没有激起涟漪不如逃票进月牙泉来得爽快。一路大快朵颐灌着啤酒青海湖绕了半圈，又借着晨曦疾行200公里去睡一楼是卖棺材的小店。来到向往的阿勒泰喀纳斯身上的钱却只够买一张烤馕对着湖水细抿，日夜兼行跑来伊犁却并未看那大草原而是在网吧撸了一周，同行的伙伴将魔兽给练满了级。荒唐不经事顶着在嘉峪关染着的红毛逛满是哈维的汉人街，见身边一队队经过的维和部队感受GJ的强权。问我都有哪些收获这一去，八千里路尘与土。</p>

<p>当我坐在伊宁的一栋两层小楼中间露天台阶就着阳光看书时，心中确也有那么一丝丝的平静与火花，具体是什么说不上来，就感觉着很舒服，吃张馕晒晒太阳，本来刚睡醒的身子便又在这光芒中一点点的抽去力量，瞌睡犯将上来。</p>

<p>这次读李娟的书便将那种迷惑的情感一把火烧了上来，清晰明了浑身通透。</p>

<p>她讲自己在野外睡觉的经历，和衣便躺，至多把外套罩在头上遮挡阳光，因为不愿家里干活，可以这样一睡一天，临近傍晚才晃回去吃饭。有时候经过的羊群会把她吵醒，放牧的男子在旁边笑，她知道是那男子故意赶来吵醒的她，虽恼但并不挂怀，等羊群过去便继续会周公。自然亲切，跃然纸上，仿佛在看另一个世界的故事。却也有真实的一面，说她的恋爱，对象是一位开卡车的司机，初觉得那卡车又破又臭，晃来晃去开得极慢，爱上司机后感觉全然相反，瞧，仿佛又看见了邻家的大姑娘。说在结婚的舞会上无人陪她一个汉人女子跳舞，只能扯着一位四五岁的女童蹦蹦跳跳，待女童被母亲牵回家后看到自己特意穿来的裙子上面一个个的黑手印委屈得想哭，便也不自觉地为她哀伤。还有那位舞会上迷人的哈族少年，自顾弹琴，我们的女主角喝多了后也只能蹒跚回家无人理睬。</p>

<p>三毛也写过她的撒哈拉沙漠故事，多了几分轻巧，大家看到的是作为一个家庭主妇能在如此恶劣的环境中生活得有神有色的得意，也写她平淡的生活故事，读起来倒也不觉乏味，但看多了终归觉得那是别人的生活，作为一个看客又能如何？写她的丈夫，文字间带着满足与欣喜，一副美好的画卷值得欣赏，但正如伟大的剧本都是悲剧一样，唯缺陷与不足才会引发人们的喟叹思考冥想。</p>

<p>《我的阿勒泰》好似她的日记，看的过程中又像在看自己，一个与自己相仿的人生活在一个全然不同的文化世界中，有她的新奇与惊喜，也有她的孤独与无奈，相比于《一个人的村庄》那份冰封的孤独灵魂宛如一个已经久远的故事，李娟却是鲜活的火焰，跃动照耀在广袤的戈壁。这份大自然的静默与生命的跳动相得益彰，让人看了总会不自觉地动容。想去尝试但又清醒的认识到这种真实的辛苦化在笔尖不过了了几行，想来一般人终归还是差那么一些火候，便最终能坚持下来恐怕也给磨去了灵性泯然众矣。不禁感叹李娟的天才，能将生切活剥的羊肉做得滋滋入味以飨读者。个中滋味言不及万一，想要去看她的好，还是捧起书来自己读一遍吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[怀抱有时]]></title>
    <link href="http://sonnewilling.com/blog/2014/06/17/huai-bao-you-shi/"/>
    <updated>2014-06-17T15:49:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2014/06/17/huai-bao-you-shi</id>
    <content type="html"><![CDATA[<p>冬来夏往，就这么着毕业一年。毕业季的时候并没有多少感伤与兴奋，送了几届的人头轮到自己已经累感不爱。</p>

<p>随着艾莉娅踏上驶向布拉佛斯的商船冰与火又用这样一个充满希望的镜头结束了第四季的故事。我记得第三季结束的时候是龙母霸气的看着她的几条龙在天空飞翔，而在这一季的终结，又是她亲手将两条龙锁入地库，不知道它们命运几何。</p>

<p>艾莉娅跑到船头望向大洋深处的镜头美得动人，一片充满未知与希望的新世界，不禁感概生命的奇遇美好。想起开头时罗柏多么意气昂扬却终究抵不住一死，到底最珍贵的东西还是贱命一条，活下去来感知世界的精彩，便是一种自在充盈，无与伦比。</p>

<p>前一集中耶哥蕊特中箭临死，在琼恩怀里时喃喃那句“你什么都不懂”让人动容。连托蒙德都知道耶哥蕊特一直在喋喋不休的讲着要杀死琼恩是因为那至深的爱。生命的美妙再次得以体现，尤以死讲述的最具冲击力。</p>

<!--more-->


<p>规律化的作息容易使人懒惰，每晚从图书馆走出来就在计划着健身与看美剧的时间表，从未抬头看一眼周遭。后来在一个入冬寒假来临的晚上，照常从图书馆往家里走，因为假期与温度的关系竟也有些顾影自怜了起来，环顾一眼觉得有些寂寞。而当走出校门口时发现门口卖铁板烧的阿姨在跟旁边卖水果的小贩愉快的聊着天，说着近期的生意。有些羞愧自己直到现在才发现他们也是一个个鲜活的生命，有着自己的生活。</p>

<p>睁眼去看，会觉得整个世界都活了起来。到了小区门口，再看那坐在楼下长椅的保安，也开始好奇起了他是如何打发这一个个漫长的夜晚。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UNIX程序制作成WIN Server笔记]]></title>
    <link href="http://sonnewilling.com/blog/2014/06/14/unixcheng-xu-zhi-zuo-cheng-win-serverbi-ji/"/>
    <updated>2014-06-14T16:55:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2014/06/14/unixcheng-xu-zhi-zuo-cheng-win-serverbi-ji</id>
    <content type="html"><![CDATA[<h1>初</h1>

<p>四五月份折腾完聊天服务器后就放了下来开始做个公司的CMS，重拾PHP的感觉还不错。几年不见多了很多框架，随便挑一个用着也很是方便，感觉现在做应用层的开发真是越来越简单了。各种框架工具一应俱到，从UNIX脱离出来重新投入到一键式的开发环境中真有点说不出的幸福。</p>

<p>开始的时候以为编程的世界是个江湖，每个码农都应该朝着绝顶高手的目标不断努力，只有将自己的武功修炼到化境才能算得上功成名就，渐而渐的却发现自己所处的环境跟江湖有不少区别的。也许在自己不知道的层面上还是各种武林高手呼风唤雨，但就现在自己所处的位置却是一个战场无疑。自己的能力与各种框架工具相比就算提升了几倍也是显得那么微不足道。就好比之前写聊天程序时各种尝试，从多进程到多线程，从线程池到多路复用，就自己的能力而言性能是在可观的提升的，心里也有些小得意。直到后面用上了<code>Libevent</code>&hellip;回头看看自己的努力就像天边的浮云，看上去很美而已。</p>

<!--more-->


<p>现在的产品开发正朝着越来越高的层次迈进，对于程序员的素质要求也逐步的降低，很多时候小码农真的像战场上的士兵一样，每人一件标准式的兵器往前冲就是了，真正能主导战场走向的反而是居于幕后激昂指点的PM。</p>

<p><code>C++</code>11出了<code>shared_ptr</code>，苹果手里的<code>OC</code>搭配上<code>ARC</code>还尚嫌不足轰轰烈烈来了个<code>Swift</code>，<code>JS</code>不满足于前端的限制整了套<code>NODEJS</code>，<code>Python</code>的<code>Django</code>，<code>PHP</code>的<code>Codeigniter</code>，大学时所学的操作系统，指针，数据结构已经渐渐地离我们远去，能不能说这是一个最好的时代却也是一个最坏的时代呢？</p>

<h1>缘</h1>

<p>公司现在跑的测试服务器装的是WIN SERVER的系统，没道理为了一个小程序重装系统，所以就开始了踩坑遍地的跨平台旅程。</p>

<h1>足下</h1>

<p>首先需要的是确定使用什么工具进行WIN的编译。以为使用的是Mac做的第一次开发，借助了Eclipse+GCC，所以第一想法也是在WIN下使用这一套环境，进行Eclipse+MinGW相信也可以搞定。</p>

<p>在对GLib进行配置的时候还是相对顺利的，其实在自己心里设想的就是把用到的各种库填好相应的头引用，lib引用就足以使用了。只是后面的历程说明老是把事情往简单想早晚会吃大亏的。</p>

<p>在套Libevent就出现了很多问题，而且因为不知道是不是因为年代比较久远且与现在的潮流脱节，在Google上搜来搜去也就那么几篇文章，我在配的时候出现的<code>PROPC_MESSAGE ERROR</code>根本搜不出所以然来。</p>

<p>于是乎在折腾了N个日子后的一个悲观的整个人都不好了的下午，试想着不如直接用<code>Cygwin</code>算了，顶多从新把东西都编译一遍，但最起码这玩意儿咱做过一遍心里还有底。幸运的是下回来<code>Cygwin</code>刚试用了感觉一切良好的时候下班的时间到了。</p>

<p>回家吃饱饭在图书馆空调的沁脾下逐渐平息了青春的躁动决定还是另谋它法，<code>Cygwin</code>一条路走到黑搞不好被炒了鱿鱼都说不准。由此可见下班及时回家是多么的重要。</p>

<p>第二天回来重新来过开始用起<code>VS</code>来。WIN8配上VS，一切感觉都是那么的美好，阳光透过窗子洒在脚上提醒我到了穿拖鞋上班的季节。</p>

<p>GLib的配置依旧十分顺利，还是卡在了Libevent上。对Libevent的编译十分简单，使用VS自带的<code>nmake</code>可以很轻松的将Libevent的三个lib给编译出来。但在引用的过程中总会出现莫名其妙的错误。开始考虑的是x86与x64导致的问题，但分两种情况编译后问题依然存在。卡了快一天后在网上找到了一个配置好的Demo，运行竟然成功了。通过编译参数的详细对比发现在指定运行库的地方需要调整为<code>/MT</code>的模式，具体的原因参见这篇文章<a href="http://msdn.microsoft.com/zh-cn/library/2kzt1wy3.aspx">/MD、/MT、/LD(使用运行库)</a>，有点踏破铁鞋无觅处，得来全不费功夫的感觉。虽然配置好了但还是有点知其然不知其所以然。</p>

<p>接下来便是再接再厉将<code>mysql</code>的库搭好环境便算彻底搞定了。有时候总觉得事情老是在自己最放心的地方峰回路转，其实说白了还是自己的基本功不扎实，觉得简单并不一定了解到了方方面面，也可能自己并不知道其中的重点难点所在而又继续踩坑。对于<code>mysql</code>的配置这点感触尤其深刻。总觉得相当简单手到擒来，结果还是卡了半天，最后才发现自己选择的是x64的版本与工程版本不匹配，更换后终于拨云见日。</p>

<p>整体环境搭出来后才感觉轻松了不少，觉得这事儿终于算是有些眉目了。虽然WIN下面的socket是自己实现的，但还是跟UNIX的API保持一致的。只需在开始的时候来一句<code>WSAStartup</code>就万事大吉了。其它的便是一些接口的细节修改。在VS下面很多如<code>sprintf</code>，<code>fopen</code>的函数会报不安全的错误，建议修改成<code>sprintf_s</code>，<code>fopen_f</code>，懒得修改的话也可以直接对工程进行配置，忽略这个类型的警告。</p>

<p>最后的成功运行让我心中长出一口恶气，正好是周五的下午，收拾东西踢个靓球。</p>

<h1>峰回</h1>

<p>六月初的时候公司换了新的地点，大了不少不说离着也近感觉还是不错的。新地方上班的第一天便是赶紧在Mac上装个WIN8，之前编译的时候对着项目经理的13寸小电脑佝偻的一个多星期，说什么也不能再受罪了。</p>

<p>这年头来个双系统还是真是方便，纯鼠标操作点几下就搞定了。按完以后面对着WIN8高大上的界面不禁手痒，来几盘CS再方便不过。</p>

<p>这里上班有大食堂可以吃，不用像之前那样叫外卖了，不过之前也没怎么吃外卖，开始是炒了菜带来吃，嫌麻烦改成了面包火腿黄瓜鸡蛋，再后来还是嫌麻烦两片面包夹个鸡蛋足矣。新地方试了几天饭堂发现还是面包鸡蛋吃着爽快，唯一值得留恋的是中午吃饭可以遇到两位管理处的小妹妹，长得都还蛮不错的。</p>

<p>正当觉得要脱离苦海的时候boss要求要把exe做成服务，这样开机可以直接启动更方便。没啥好说的，继续耕耘呗。</p>

<p>开始的时候没什么思路，在网上简单的搜索了下发现有个<code>sc</code>的命令可以直接将exe制作成服务，很是开心。结果制作出来的服务跟不启动不了，再仔细一搜发现关于服务的工程需要调用特定的WIN API才行，觉得心里有点毛，不会又要一阵折腾吧。</p>

<p>在VS下面发现可以直接新建c#的服务工程，但又不能直接用c的代码，想着可以将做的项目做成lib再在里面调用，觉得十分可行。为了验证自己这个想法的可行性，背起书包回家吃饭。</p>

<p>第二天再来的时候果然觉得这个方案不是很靠谱，因为不熟悉WIN API而想方设法绕过去看上去很简单，搞不好又是一坨屎出来。静下来琢磨下过程，直接用c来调用的话应该也不会很难，就当学习呗。</p>

<p>大体的了解了下思路，发现没有自己想象的难，大体就是开始的时候初始化一个叫<code>分配表</code>的结构体，在这个结构体可以定义服务的名字和主调用程序，然后调用一个叫dispatch的函数，大体意思是这个dispatch会把当前进程转换为分配表的进程，然后再通过分配表启动一个新的线程，再用这个线程调用我们的主程序。在这个主程序中我们还需要对当前服务的状态进行不同程度的修改，然后把自己写好的程序放进去就行了。另外还需要写一个<code>Handler</code>来接收这个服务的各种返回状态。</p>

<p>需要注意的是启动的服务无法打印信息，需要搭配日志来使用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于C的Socket聊天服务器]]></title>
    <link href="http://sonnewilling.com/blog/2014/05/05/ji-yu-cshi-de-socketliao-tian-fu-wu-qi/"/>
    <updated>2014-05-05T16:26:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2014/05/05/ji-yu-cshi-de-socketliao-tian-fu-wu-qi</id>
    <content type="html"><![CDATA[<p>前段时间使用C借助libevent，glib实现了一个简单的可以单聊，群聊的服务器，今天因为需求有些改动所以又翻出来改了一下。果然一日不见如隔三秋，虽说是自己写的东西，但基本上已经忘得七七八八了。觉得有必要在这里记录一下，省得以后又悲剧。</p>

<h2>一，工具类</h2>

<h3>1.libunp.a</h3>

<p>用到的第一个库便是它，因为它是《UNIX网络编程》的示例代码的工具库&hellip;开头写的测试程序基本都是照着示例代码改来改去，自然也是用的一样的函数来实现。觉得对于一般的读写和各种包裹函数都是很有用的。具体的不用细说，还是认真翻书来得实在。</p>

<h3>2.GLib</h3>

<h4>GHashTable</h4>

<p>这里基本的数据结构如哈希表之类的使用了GLib来做主角，另外它的GString也很好用，可以很方便的初始化与格式化字符串，个人感觉比C风格的字符串要好用一些。</p>

<p>GLib哈希表支持各种不同的结构，如果觉得<code>int</code>,<code>string</code>不够用可以直接使用指针，对于我来说已经相当足够。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">GHashTable</span> <span class="o">*</span><span class="n">user_to_bev_map</span> <span class="o">=</span> <span class="n">g_hash_table_new</span><span class="p">(</span><span class="n">g_direct_hash</span><span class="p">,</span><span class="n">g_direct_equal</span><span class="p">);</span>
</span><span class='line'><span class="n">g_hash_table_insert</span><span class="p">(</span><span class="n">user_to_bev_map</span><span class="p">,</span> <span class="n">GINT_TO_POINTER</span><span class="p">(</span><span class="n">u_id</span><span class="p">),</span> <span class="n">GINT_TO_POINTER</span><span class="p">(</span><span class="n">bev</span><span class="p">));</span>
</span><span class='line'><span class="k">struct</span> <span class="n">bufferevent</span> <span class="o">*</span><span class="n">bev</span> <span class="o">=</span> <span class="n">g_hash_table_lookup</span><span class="p">(</span><span class="n">user_to_bev_map</span><span class="p">,</span><span class="n">GINT_TO_POINTER</span><span class="p">(</span><span class="n">to_id</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>g_direct_hash</code>,<code>g_direct_equal</code>代表初始化的类型，详细的介绍如下:</p>

<blockquote><p>Hash values returned by hash_func are used to determine where keys are stored within the GHashTable data structure.</p>

<p>The <code>g_direct_hash()</code>, <code>g_int_hash()</code>, <code>g_int64_hash()</code>, <code>g_double_hash()</code> and <code>g_str_hash()</code> functions are provided for some common types of keys.</p>

<p>If hash_func is NULL, g_direct_hash() is used.</p></blockquote>

<!-- more -->


<h4>GString</h4>

<p>相比于C风格的字符串需要定长初始化，拼接赋值之类的，GString提供的字符串要人性化很多，还内置了长度的属性，可以很方便的调用。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">GString</span> <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="n">g_string_sized_new</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">g_string_printf</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span><span class="s">&quot;INSERT INTO table (id, type) VALUES (%s, %s);&quot;</span><span class="p">,</span><span class="n">id</span><span class="p">,</span><span class="n">type</span><span class="p">);</span>
</span><span class='line'><span class="n">g_string_erase</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sql</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="n">g_string_free</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>还可以很方便的重复使用，但不要忘记最后的释放，关于释放函数的第二个参数是这样说明的：</p>

<blockquote><p>If free_segment is TRUE it also frees the character data. If it&rsquo;s FALSE, the caller gains ownership of the buffer and must free it after use with g_free().</p></blockquote>

<p>还有个常用的函数是<code>g_strsplit</code>，可以对字符进行分割,第三个参数表明需要分出几个来，0的话则一直切分到最后。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gchar</span> <span class="o">**</span><span class="n">p</span> <span class="o">=</span> <span class="n">g_strsplit</span><span class="p">(</span><span class="n">line</span><span class="p">,</span><span class="s">&quot;,&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">dispatch_request</span><span class="p">(</span><span class="n">source_id</span><span class="o">-&gt;</span><span class="n">str</span><span class="p">,</span> <span class="n">p</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'><span class="n">g_strfreev</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>当然，关于GLib还有很多有用的东西，用Dash下个文档慢慢翻着看一遍相信会很有收获的。</p>

<h3>3.Mysql</h3>

<p>有服务的地方就有数据库，对于这种简易的小服务，Mysql是必不可少的。</p>

<p>针对Mysql封了三个简单的函数方便调用：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">MYSQL</span> <span class="o">*</span><span class="nf">db_connect</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">url</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">user_name</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">pwd</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">table_name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">MYSQL</span> <span class="o">*</span><span class="n">conn_ptr</span><span class="p">;</span>
</span><span class='line'>  <span class="n">conn_ptr</span> <span class="o">=</span> <span class="n">mysql_init</span><span class="p">(</span><span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">conn_ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;mysql_init failed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">conn_ptr</span> <span class="o">=</span> <span class="n">mysql_real_connect</span><span class="p">(</span><span class="n">conn_ptr</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">user_name</span><span class="p">,</span> <span class="n">pwd</span><span class="p">,</span> <span class="n">table_name</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">mysql_set_character_set</span><span class="p">(</span><span class="n">conn_ptr</span><span class="p">,</span><span class="s">&quot;utf8&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">conn_ptr</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">conn_ptr</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">MYSQL_RES</span> <span class="o">*</span><span class="nf">db_query</span><span class="p">(</span><span class="n">MYSQL</span> <span class="o">*</span><span class="n">conn_ptr</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">sql</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">res</span> <span class="o">=</span> <span class="n">mysql_query</span><span class="p">(</span><span class="n">conn_ptr</span><span class="p">,</span> <span class="n">sql</span><span class="p">);</span> <span class="c1">//查询语句</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;error:%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">mysql_error</span><span class="p">(</span><span class="n">conn_ptr</span><span class="p">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">MYSQL_RES</span> <span class="o">*</span><span class="n">res_ptr</span> <span class="o">=</span> <span class="n">mysql_store_result</span><span class="p">(</span><span class="n">conn_ptr</span><span class="p">);</span>              <span class="c1">//取出结果集</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;affected %lu rows</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)</span><span class="n">mysql_affected_rows</span><span class="p">(</span><span class="n">conn_ptr</span><span class="p">));</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">res_ptr</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>返回的<code>res_ptr</code>需要手动释放：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">mysql_free_result</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>还有一个关闭函数：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">db_close</span><span class="p">(</span><span class="n">MYSQL</span> <span class="o">*</span><span class="n">connfd</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">mysql_close</span><span class="p">(</span><span class="n">connfd</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，在服务器起来时建立数据库的连接存为全局变量，每次直接拿来用就好了，下面是一个比较典型的使用场景：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">GString</span> <span class="o">*</span><span class="n">sql</span> <span class="o">=</span> <span class="n">g_string_sized_new</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="n">g_string_printf</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span><span class="s">&quot;INSERT INTO table (id, type) VALUES (%s, %s);&quot;</span><span class="p">,</span><span class="n">id</span><span class="p">,</span><span class="n">type</span><span class="p">);</span>
</span><span class='line'><span class="n">db_query</span><span class="p">(</span><span class="n">conn_ptr</span><span class="p">,</span> <span class="n">sql</span><span class="o">-&gt;</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="n">g_string_erase</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">sql</span><span class="o">-&gt;</span><span class="n">len</span><span class="p">);</span>
</span><span class='line'><span class="n">g_string_printf</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span><span class="s">&quot;SELECT uid FROM table WHERE pid = %s&quot;</span><span class="p">,</span><span class="n">target_id</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;find users sql2:%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">sql</span><span class="o">-&gt;</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="n">MYSQL_RES</span> <span class="o">*</span><span class="n">res</span> <span class="o">=</span> <span class="n">db_query</span><span class="p">(</span><span class="n">conn_ptr</span><span class="p">,</span> <span class="n">sql</span><span class="o">-&gt;</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="n">MYSQL_ROW</span> <span class="n">sqlrow</span><span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">while</span><span class="p">((</span><span class="n">sqlrow</span> <span class="o">=</span> <span class="n">mysql_fetch_row</span><span class="p">(</span><span class="n">res</span><span class="p">)))</span>  <span class="p">{</span>
</span><span class='line'>      <span class="kt">long</span> <span class="n">to_id</span> <span class="o">=</span> <span class="n">strtol</span><span class="p">(</span><span class="n">sqlrow</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">NULL</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">g_hash_table_contains</span><span class="p">(</span><span class="n">user_to_bev_map</span><span class="p">,</span><span class="n">GINT_TO_POINTER</span><span class="p">(</span><span class="n">to_id</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">sqlrow</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">source_id</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">struct</span> <span class="n">bufferevent</span> <span class="o">*</span><span class="n">bev</span> <span class="o">=</span> <span class="n">g_hash_table_lookup</span><span class="p">(</span><span class="n">user_to_bev_map</span><span class="p">,</span><span class="n">GINT_TO_POINTER</span><span class="p">(</span><span class="n">to_id</span><span class="p">));</span>
</span><span class='line'>          <span class="n">evbuffer_add_printf</span> <span class="p">((</span><span class="k">struct</span> <span class="n">evbuffer</span> <span class="o">*</span><span class="p">)</span><span class="n">bufferevent_get_output</span><span class="p">(</span><span class="n">bev</span><span class="p">),</span> <span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">send_msg</span><span class="o">-&gt;</span><span class="n">str</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">mysql_free_result</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
</span><span class='line'><span class="n">g_string_free</span><span class="p">(</span><span class="n">sql</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">g_string_free</span><span class="p">(</span><span class="n">send_msg</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4.libevent</h3>

<h4>介绍</h4>

<p>libevent是个好东西，有了它一般的数量级的连接都不在话下了。关于这种大数量的连接是有专门的话题来讨论的-<a href="http://www.kegel.com/c10k.html">C10K</a>。</p>

<p>最开始尝试了多进程多线程，select阻塞之类的方法，最后才找到这里来，也算是按着故事的发展逻辑走了一遍符合剧情尿性吧&hellip;<a href="http://daniel.haxx.se/docs/poll-vs-select.html">这篇文章</a>写得不错，比较有指导性。</p>

<p>关于libevent上手说不上难，狠下心来多读几遍它的<a href="http://www.wangafu.net/~nickm/libevent-book/">Fast portable non-blocking network programming with Libevent</a>弄明白了个大概还是不成问题的。</p>

<p>它的优点是跨平台，可以针对不同的平台的阻塞实现相同的功能。对于我们来说只需要关心event这个东西就好了，至于是UNIX的select，Linux的epoll还是BSD的kqueue那是libevent的事情，它会在底层帮我们选择<a href="http://monkey.org/~provos/libevent/doxygen-2.0.1/">libevent Documentation</a>。</p>

<h4>原理</h4>

<p>原始的socket的连接是我们建立了连接，获得一个套接字，然后对这个套接字进行多路复用的读写。</p>

<p>而现在我们可以使用libevent提供的event将这个套接字包裹起来，针对这个event编写它特定的读写函数。因为libevent是事件驱动的，所以当读写缓冲区达到特定条件时便会自动调用我们事先定义好的函数进行逻辑处理。大大简化了编码人员的工作量，可以让我们将更多的精力集中到逻辑代码的编写上面来（恰恰是最无聊的部分&hellip;），所以这么看来，也算是对程序员傻瓜化了一下吧。</p>

<p>因为对event的读写涉及到缓冲区的东西，需要我们去按字节的读出来，这里libevent也很贴心的又帮我们简化了一下工作。除了event外还提供了<a href="http://www.wangafu.net/~nickm/libevent-book/Ref6_bufferevent.html">bufferevent</a>，看名字便知道这是专门针对读写字符准备的。这是网站上对它的介绍：</p>

<blockquote><p>Most of the time, an application wants to perform some amount of data buffering in addition to just responding to events.</p>

<p>When we want to write data, for example, the usual pattern runs something like:</p>

<ul>
<li><p>Decide that we want to write some data to a connection;</p></li>
<li><p>Put that data in a buffer.Wait for the connection to become writable;</p></li>
<li><p>Write as much of the data as we can;</p></li>
<li><p>Remember how much we wrote, and if we still have more data to write, wait for the connection to become writable again.</p></li>
</ul>


<p>This buffered IO pattern is common enough that Libevent provides a generic mechanism for it. A &ldquo;bufferevent&rdquo; consists of an underlying transport (like a socket), a read buffer, and a write buffer. Instead of regular events, which give callbacks when the underlying transport is ready to be read or written, a bufferevent invokes its user-supplied callbacks when it has read or written enough data.</p></blockquote>

<h4>使用</h4>

<p>我们可以将新建的监听套接字绑定在event上帮我们处理后续的事件：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">event_base</span> <span class="o">*</span><span class="n">base</span><span class="p">;</span>
</span><span class='line'><span class="k">struct</span> <span class="n">event</span> <span class="o">*</span><span class="n">listener_event</span><span class="p">;</span>
</span><span class='line'><span class="n">serveListen</span><span class="p">(</span><span class="o">&amp;</span><span class="n">listener</span><span class="p">);</span>
</span><span class='line'><span class="n">evutil_make_socket_nonblocking</span><span class="p">(</span><span class="n">listener</span><span class="p">);</span>
</span><span class='line'><span class="n">listener_event</span> <span class="o">=</span> <span class="n">event_new</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">listener</span><span class="p">,</span> <span class="n">EV_READ</span><span class="o">|</span><span class="n">EV_PERSIST</span><span class="p">,</span> <span class="n">do_accept</span><span class="p">,</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="n">base</span><span class="p">);</span>
</span><span class='line'><span class="n">event_add</span><span class="p">(</span><span class="n">listener_event</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'><span class="n">event_base_dispatch</span><span class="p">(</span><span class="n">base</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>当有事件进入时它会主动调用<code>do_accept</code>：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">do_accept</span><span class="p">(</span><span class="n">evutil_socket_t</span> <span class="n">listener</span><span class="p">,</span> <span class="kt">short</span> <span class="n">event</span><span class="p">,</span> <span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">event_base</span> <span class="o">*</span><span class="n">base</span> <span class="o">=</span> <span class="n">arg</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">sockaddr_storage</span> <span class="n">ss</span><span class="p">;</span>
</span><span class='line'>    <span class="n">socklen_t</span> <span class="n">slen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ss</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">listener</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">ss</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">slen</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;accept&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&gt;</span> <span class="n">FD_SETSIZE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">struct</span> <span class="n">bufferevent</span> <span class="o">*</span><span class="n">bev</span><span class="p">;</span>
</span><span class='line'>        <span class="n">evutil_make_socket_nonblocking</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>        <span class="n">bev</span> <span class="o">=</span> <span class="n">bufferevent_socket_new</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">BEV_OPT_CLOSE_ON_FREE</span><span class="p">);</span>
</span><span class='line'>        <span class="n">bufferevent_setcb</span><span class="p">(</span><span class="n">bev</span><span class="p">,</span> <span class="n">readcb</span><span class="p">,</span> <span class="n">writecb</span><span class="p">,</span> <span class="n">errorcb</span><span class="p">,</span> <span class="n">GINT_TO_POINTER</span><span class="p">(</span><span class="n">fd</span><span class="p">));</span>
</span><span class='line'>        <span class="n">bufferevent_setwatermark</span><span class="p">(</span><span class="n">bev</span><span class="p">,</span> <span class="n">EV_READ</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">MAX_LINE</span><span class="p">);</span>
</span><span class='line'>        <span class="n">bufferevent_enable</span><span class="p">(</span><span class="n">bev</span><span class="p">,</span> <span class="n">EV_READ</span><span class="o">|</span><span class="n">EV_WRITE</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面代码可以看出，我们从<code>accept</code>中接收回一个套接字，并将该套接字绑定在一个<code>bufferevent</code>，设置好相应的读写函数与读写触发的水位线加入到<code>base</code>里便可以从容的等待事件的触发了。</p>

<p>关于水位线，这里也有段详细的描述：</p>

<blockquote><p>Every bufferevent has two data-related callbacks: a read callback and a write callback. By default, the read callback is called whenever any data is read from the underlying transport, and the write callback is called whenever enough data from the output buffer is emptied to the underlying transport. You can override the behavior of these functions by adjusting the read and write &ldquo;watermarks&rdquo; of the bufferevent.</p>

<p>Every bufferevent has four watermarks:</p>

<ul>
<li><code>Read low-water mark</code></li>
</ul>


<p>Whenever a read occurs that leaves the bufferevent’s input buffer at this level or higher, the bufferevent’s read callback is invoked. Defaults to 0, so that every read results in the read callback being invoked.</p>

<ul>
<li><code>Read high-water mark</code></li>
</ul>


<p>If the bufferevent’s input buffer ever gets to this level, the bufferevent stops reading until enough data is drained from the input buffer to take us below it again. Defaults to unlimited, so that we never stop reading because of the size of the input buffer.</p>

<ul>
<li><code>Write low-water mark</code></li>
</ul>


<p>Whenever a write occurs that takes us to this level or below, we invoke the write callback. Defaults to 0, so that a write callback is not invoked unless the output buffer is emptied.</p>

<ul>
<li><code>Write high-water mark</code></li>
</ul>


<p>Not used by a bufferevent directly, this watermark can have special meaning when a bufferevent is used as the underlying transport of another bufferevent. See notes on filtering bufferevents below.</p></blockquote>

<p>细读一遍还是蛮获益匪浅的，大体意思为通过水位线的设置来触发读写的回调函数。</p>

<ul>
<li><p>对于读取水位，有读低水位与高水位，读低水位默认为0，即当buffer里数据量高于0时便会调用读回调，也就是一有数据便会回调，另一方面，当超过读的高水位时，buffer便会停止接受数据，这个值默认被置为<code>unlimited</code>，所以可以理解为永远不会停止接受数据。</p></li>
<li><p>对于写入水位，写的低水位表示当写出数据后buffer里剩余的数据量小于该水位时调用写函数，默认为0，即只有buffer被清空后该函数才会被回调。写的高水位比较特殊，一般情况下没有使用。</p></li>
</ul>


<p>对于水位线的设置是通过下面的函数实现的</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">bufferevent_setwatermark</span><span class="p">(</span><span class="k">struct</span> <span class="n">bufferevent</span> <span class="o">*</span><span class="n">bufev</span><span class="p">,</span> <span class="kt">short</span> <span class="n">events</span><span class="p">,</span><span class="kt">size_t</span> <span class="n">lowmark</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">highmark</span><span class="p">);</span>
</span><span class='line'><span class="nl">ex:</span><span class="n">bufferevent_setwatermark</span><span class="p">(</span><span class="n">bev</span><span class="p">,</span> <span class="n">EV_READ</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">MAX_LINE</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>在回调函数里这样获取数据：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">evbuffer</span> <span class="o">*</span><span class="n">input</span> <span class="o">=</span> <span class="n">bufferevent_get_input</span><span class="p">(</span><span class="n">bev</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">((</span><span class="n">line</span> <span class="o">=</span> <span class="n">evbuffer_readln</span><span class="p">(</span><span class="n">input</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="n">EVBUFFER_EOL_LF</span><span class="p">)))</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">gchar</span> <span class="o">**</span><span class="n">p</span><span class="p">;</span>
</span><span class='line'>  <span class="n">p</span> <span class="o">=</span> <span class="n">g_strsplit</span><span class="p">(</span><span class="n">line</span><span class="p">,</span><span class="s">&quot;,&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">dispatch_request</span><span class="p">(</span><span class="n">u_data</span><span class="o">-&gt;</span><span class="n">u_id</span><span class="o">-&gt;</span><span class="n">str</span><span class="p">,</span> <span class="n">p</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">p</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'>  <span class="n">g_strfreev</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是，提供的<code>evbuffer_readln</code>可以将接受到的一行数据自动去除<code>\n</code>，方便了我们的后期使用。</p>

<h2>二，实现思路</h2>

<p>具体的思路因为暂时在需求上不是很复杂所以比较简单。</p>

<p>首先实现了<code>do_accept</code>函数，阻塞接收请求建立连接的<code>socket</code>，当有新的<code>socket</code>进来后使用<code>bufferevent</code>将其包装好，并设置好它的首次读写回调函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">bufferevent</span> <span class="o">*</span><span class="n">bev</span><span class="p">;</span>
</span><span class='line'><span class="n">evutil_make_socket_nonblocking</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'><span class="n">bev</span> <span class="o">=</span> <span class="n">bufferevent_socket_new</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="n">fd</span><span class="p">,</span> <span class="n">BEV_OPT_CLOSE_ON_FREE</span><span class="p">);</span>
</span><span class='line'><span class="n">bufferevent_setcb</span><span class="p">(</span><span class="n">bev</span><span class="p">,</span> <span class="n">readcb</span><span class="p">,</span> <span class="n">writecb</span><span class="p">,</span> <span class="n">errorcb</span><span class="p">,</span> <span class="n">GINT_TO_POINTER</span><span class="p">(</span><span class="n">fd</span><span class="p">));</span>
</span><span class='line'><span class="n">bufferevent_setwatermark</span><span class="p">(</span><span class="n">bev</span><span class="p">,</span> <span class="n">EV_READ</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">MAX_LINE</span><span class="p">);</span>
</span><span class='line'><span class="n">bufferevent_enable</span><span class="p">(</span><span class="n">bev</span><span class="p">,</span> <span class="n">EV_READ</span><span class="o">|</span><span class="n">EV_WRITE</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>首次客户端的通信用于标示此次通信的目的，当为登录时，进入<code>reg_client</code>将该用户注册至服务器，并修改其回调函数用于具体的逻辑处理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android USB Host通信]]></title>
    <link href="http://sonnewilling.com/blog/2014/04/30/android-usb-hosttong-xin/"/>
    <updated>2014-04-30T11:18:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2014/04/30/android-usb-hosttong-xin</id>
    <content type="html"><![CDATA[<h2>开了个头</h2>

<p>一部Android手机加上一块Arduino的板子通过USB通信可以实现很多有趣的东西。</p>

<p>2011年Google推出Android开放配件协议AOA及配件开发工具包ADK提供了Android USB或蓝牙进行通信的API，为基于Android系统的智能设备控制外设提供了条件。利用Android，系统可以连接从家用电器到重型机械、机器人等多种设备 <a href="http://www.chinaaet.com/article/216691">原文</a>。</p>

<!-- more -->


<p>想来这便是Android的魅力所在，开源的Linux系统给了任何人实现自己的梦想的可能。无需再依靠大的厂商提供的一套套完整的服务。仅仅通过自己的想象力配以几块平淡无奇的板子，便能实现一些之前看起来很高大上的东西。</p>

<h2>利其器</h2>

<p>1.Android-<a href="http://developer.android.com/sdk/index.html">ADT</a></p>

<p>Android的简单开发依赖于工具包SDK和开发工具IDE的使用。Google为我们提供的ADT打包了完善的开发工具：</p>

<blockquote><p>Eclipse + ADT plugin</p>

<p>Android SDK Tools</p>

<p>Android Platform-tools</p>

<p>The latest Android platform</p>

<p>The latest Android system image for the emulator</p></blockquote>

<p>这里还不得不提的是一个关于Android模拟器的问题。用过eclipse的都知道，上面自带的模拟器速度奇慢，尤其当适应了iPhone开发后对其更是不能忍受。这里有一篇文章便是专门讲解了下为毛Android的模拟器这么慢-<a href="http://stackoverflow.com/questions/1584617/simulator-or-emulator-what-is-the-difference">Simulator or Emulator</a>。</p>

<p>然后便发现了这个神器-<a href="http://www.genymotion.com/">Genymotion</a>，感觉这玩意儿比苹果的模拟器还快。</p>

<p>2.<a href="http://www.arduino.cc/">Arduino</a></p>

<p>这个板子还是蛮便宜又好用的，官网的文档也全，基本跟着读一遍就知道大体的开发的流程了，提供的IDE有点坑，只能设为9号字体，倒是可以调大，调大的话光标根本对不上&hellip;</p>

<p><img src="http://sonnewilling.com/images/tec/androidusb/arduino.png" alt="image" /></p>

<p>示例的代码做了个简单的读数据的功能，每次读一行然后原样返回。</p>

<p>开头的setup那里设置了<a href="http://en.wikipedia.org/wiki/Baud">波特率</a>，大体上波特率跟每秒发送的信息量有关。手上的这块板子经过简单的测试，有如下数据：</p>

<blockquote><p>波特率为9600时，每次可以携带129个字节，间隔极限在150ms</p>

<p>波特率为14400时，每次可以携带191个字节，间隔极限在260ms</p></blockquote>

<p>个人推测大概越好的板子每次能携带的信息量越大且时间间隔越短吧，即所谓的可以支持很高的波特率。</p>

<p>有了上面这两套东西基本上就可以开始USB通信了。</p>

<h2>幕前</h2>

<p>关于详细的实现Google的教程上有个快速简易的介绍，一般跟着做是可以实现效果的-<a href="http://developer.android.com/guide/topics/connectivity/usb/index.html">USB Host and Accessory</a>。稍微了解过Android开发的看着玩意儿没啥问题。基本上就是在<code>manifest</code>里对指定的activity配置下权限就妥了，它还提供了一个<code>device_filter</code>的xml文件，可以过滤指定的USB设备。</p>

<p>因为要在Andorid上做开发然后测试与Arduino，所以免不了要先往Android上写程序再让这俩东西连接，老是这样往复的在几台设备间插拔效率太低，Google提供给我们的解决方案是让Android通过Wifi连电脑，然后Android与Arduino一直连着线就妥了。</p>

<p>照着试了几遍，别人的电脑一连就妥，我的死活不行，也不知是不是苹果机的缘故。无奈实在没有插来插去的兴趣，所以又研究了下Genymotion，因为它是依托在VirtualBox上的，总觉得可以一搞。</p>

<p>多次尝试后发现，可以先将Arduino板插上电脑，如下图会出现这个设备，添加虚拟机对它的过滤，这之后把板子拔下来再插回去的话虚拟机也即Android模拟器便可以接收到Arduino板子的信号了。想要对板子连电脑烧程序的话，则反过来，先取消对板子的过滤，插拔一次便连上电脑了。</p>

<p><img src="http://sonnewilling.com/images/tec/androidusb/usbbox.png" alt="image" /></p>

<p>具体的实现大体分为四步：<a href="http://developer.android.com/guide/topics/connectivity/usb/index.html">USB Host and Accessory</a></p>

<h4>一，Obtaining permission to communicate with a device</h4>

<p>先实例化一个<code>UsbManager</code>，通过它来获取USB连接的权限。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">UsbManager</span> <span class="n">mUsbManager</span> <span class="o">=</span> <span class="o">(</span><span class="n">UsbManager</span><span class="o">)</span> <span class="n">getSystemService</span><span class="o">(</span><span class="n">Context</span><span class="o">.</span><span class="na">USB_SERVICE</span><span class="o">);</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ACTION_USB_PERMISSION</span> <span class="o">=</span>
</span><span class='line'>    <span class="s">&quot;com.android.example.USB_PERMISSION&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">mPermissionIntent</span> <span class="o">=</span> <span class="n">PendingIntent</span><span class="o">.</span><span class="na">getBroadcast</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="k">new</span> <span class="n">Intent</span><span class="o">(</span><span class="n">ACTION_USB_PERMISSION</span><span class="o">),</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">IntentFilter</span> <span class="n">filter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">IntentFilter</span><span class="o">(</span><span class="n">ACTION_USB_PERMISSION</span><span class="o">);</span>
</span><span class='line'><span class="n">registerReceiver</span><span class="o">(</span><span class="n">mUsbReceiver</span><span class="o">,</span> <span class="n">filter</span><span class="o">);</span>
</span><span class='line'><span class="n">UsbDevice</span> <span class="n">device</span><span class="o">;</span>
</span><span class='line'><span class="n">mUsbManager</span><span class="o">.</span><span class="na">requestPermission</span><span class="o">(</span><span class="n">device</span><span class="o">,</span> <span class="n">mPermissionIntent</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>权限获取：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ACTION_USB_PERMISSION</span> <span class="o">=</span>
</span><span class='line'>    <span class="s">&quot;com.android.example.USB_PERMISSION&quot;</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">final</span> <span class="n">BroadcastReceiver</span> <span class="n">mUsbReceiver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BroadcastReceiver</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">action</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">ACTION_USB_PERMISSION</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">action</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">UsbDevice</span> <span class="n">device</span> <span class="o">=</span> <span class="o">(</span><span class="n">UsbDevice</span><span class="o">)</span><span class="n">intent</span><span class="o">.</span><span class="na">getParcelableExtra</span><span class="o">(</span><span class="n">UsbManager</span><span class="o">.</span><span class="na">EXTRA_DEVICE</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">intent</span><span class="o">.</span><span class="na">getBooleanExtra</span><span class="o">(</span><span class="n">UsbManager</span><span class="o">.</span><span class="na">EXTRA_PERMISSION_GRANTED</span><span class="o">,</span> <span class="kc">false</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span><span class="o">(</span><span class="n">device</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>                      <span class="c1">//call method to set up device communication</span>
</span><span class='line'>                   <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Log</span><span class="o">.</span><span class="na">d</span><span class="o">(</span><span class="n">TAG</span><span class="o">,</span> <span class="s">&quot;permission denied for device &quot;</span> <span class="o">+</span> <span class="n">device</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<h4>二，Enumerating devices</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">UsbDevice</span><span class="o">&gt;</span> <span class="n">deviceList</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="na">getDeviceList</span><span class="o">();</span>
</span><span class='line'><span class="n">Iterator</span><span class="o">&lt;</span><span class="n">UsbDevice</span><span class="o">&gt;</span> <span class="n">deviceIterator</span> <span class="o">=</span> <span class="n">deviceList</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">iterator</span><span class="o">();</span>
</span><span class='line'><span class="k">while</span><span class="o">(</span><span class="n">deviceIterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">()){</span>
</span><span class='line'>    <span class="n">UsbDevice</span> <span class="n">device</span> <span class="o">=</span> <span class="n">deviceIterator</span><span class="o">.</span><span class="na">next</span><span class="o">()</span>
</span><span class='line'>    <span class="c1">//your code</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>三，Communicating with a device</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Byte</span><span class="o">[]</span> <span class="n">bytes</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">TIMEOUT</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">boolean</span> <span class="n">forceClaim</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="n">UsbInterface</span> <span class="n">intf</span> <span class="o">=</span> <span class="n">device</span><span class="o">.</span><span class="na">getInterface</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">UsbEndpoint</span> <span class="n">endpoint</span> <span class="o">=</span> <span class="n">intf</span><span class="o">.</span><span class="na">getEndpoint</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'><span class="n">UsbDeviceConnection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">mUsbManager</span><span class="o">.</span><span class="na">openDevice</span><span class="o">(</span><span class="n">device</span><span class="o">);</span>
</span><span class='line'><span class="n">connection</span><span class="o">.</span><span class="na">claimInterface</span><span class="o">(</span><span class="n">intf</span><span class="o">,</span> <span class="n">forceClaim</span><span class="o">);</span>
</span><span class='line'><span class="n">connection</span><span class="o">.</span><span class="na">bulkTransfer</span><span class="o">(</span><span class="n">endpoint</span><span class="o">,</span> <span class="n">bytes</span><span class="o">,</span> <span class="n">bytes</span><span class="o">.</span><span class="na">length</span><span class="o">,</span> <span class="n">TIMEOUT</span><span class="o">);</span> <span class="c1">//do in another thread</span>
</span></code></pre></td></tr></table></div></figure>


<h4>四，Terminating communication with a device</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">BroadcastReceiver</span> <span class="n">mUsbReceiver</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BroadcastReceiver</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onReceive</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">,</span> <span class="n">Intent</span> <span class="n">intent</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">action</span> <span class="o">=</span> <span class="n">intent</span><span class="o">.</span><span class="na">getAction</span><span class="o">();</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">UsbManager</span><span class="o">.</span><span class="na">ACTION_USB_DEVICE_DETACHED</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">action</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">UsbDevice</span> <span class="n">device</span> <span class="o">=</span> <span class="o">(</span><span class="n">UsbDevice</span><span class="o">)</span><span class="n">intent</span><span class="o">.</span><span class="na">getParcelableExtra</span><span class="o">(</span><span class="n">UsbManager</span><span class="o">.</span><span class="na">EXTRA_DEVICE</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">device</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// call your method that cleans up and closes communication with the device</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>需要注意的是两者间的通讯都是以Byte形式完成的，所以作为在接收与发送的时候需要注意相关的转码工作，而且我这边实现的是一行行的读取，所以发送的时候会隐式地拼接上<code>\n</code>。</p>

<p>发送时的转码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">changeEscapeSequence</span><span class="o">(</span><span class="n">String</span> <span class="n">in</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="n">String</span><span class="o">();</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">out</span> <span class="o">=</span> <span class="n">unescapeJava</span><span class="o">(</span><span class="n">in</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="n">out</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">out</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>  
</span><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">unescapeJava</span><span class="o">(</span><span class="n">String</span> <span class="n">str</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">str</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">sz</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
</span><span class='line'>   <span class="n">StringBuffer</span> <span class="n">unicode</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuffer</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
</span><span class='line'>   <span class="n">StringBuilder</span> <span class="n">strout</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>   <span class="kt">boolean</span> <span class="n">hadSlash</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>   <span class="kt">boolean</span> <span class="n">inUnicode</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>   <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sz</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>       <span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">inUnicode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="c1">// if in unicode, then we&#39;re reading unicode</span>
</span><span class='line'>           <span class="c1">// values in somehow</span>
</span><span class='line'>           <span class="n">unicode</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
</span><span class='line'>           <span class="k">if</span> <span class="o">(</span><span class="n">unicode</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">4</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="c1">// unicode now contains the four hex digits</span>
</span><span class='line'>               <span class="c1">// which represents our unicode character</span>
</span><span class='line'>               <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                   <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">unicode</span><span class="o">.</span><span class="na">toString</span><span class="o">(),</span> <span class="mi">16</span><span class="o">);</span>
</span><span class='line'>                   <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>                   <span class="n">unicode</span><span class="o">.</span><span class="na">setLength</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                   <span class="n">inUnicode</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                   <span class="n">hadSlash</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>               <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">NumberFormatException</span> <span class="n">nfe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                   <span class="c1">// throw new NestableRuntimeException(&quot;Unable to parse unicode value: &quot; + unicode, nfe);</span>
</span><span class='line'>                   <span class="k">throw</span> <span class="k">new</span> <span class="nf">IOException</span><span class="o">(</span><span class="s">&quot;Unable to parse unicode value: &quot;</span> <span class="o">+</span> <span class="n">unicode</span><span class="o">,</span> <span class="n">nfe</span><span class="o">);</span>
</span><span class='line'>               <span class="o">}</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="k">if</span> <span class="o">(</span><span class="n">hadSlash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="c1">// handle an escaped value</span>
</span><span class='line'>           <span class="n">hadSlash</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>           <span class="k">switch</span> <span class="o">(</span><span class="n">ch</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>               <span class="k">case</span> <span class="sc">&#39;\\&#39;</span><span class="o">:</span>
</span><span class='line'>                   <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\\&#39;</span><span class="o">);</span>
</span><span class='line'>                   <span class="k">break</span><span class="o">;</span>
</span><span class='line'>               <span class="k">case</span> <span class="sc">&#39;\&#39;&#39;</span><span class="o">:</span>
</span><span class='line'>                   <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\&#39;&#39;</span><span class="o">);</span>
</span><span class='line'>                   <span class="k">break</span><span class="o">;</span>
</span><span class='line'>               <span class="k">case</span> <span class="sc">&#39;\&quot;&#39;</span><span class="o">:</span>
</span><span class='line'>                   <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;&quot;&#39;</span><span class="o">);</span>
</span><span class='line'>                   <span class="k">break</span><span class="o">;</span>
</span><span class='line'>               <span class="k">case</span> <span class="sc">&#39;r&#39;</span><span class="o">:</span>
</span><span class='line'>                   <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\r&#39;</span><span class="o">);</span>
</span><span class='line'>                   <span class="k">break</span><span class="o">;</span>
</span><span class='line'>               <span class="k">case</span> <span class="sc">&#39;f&#39;</span><span class="o">:</span>
</span><span class='line'>                   <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\f&#39;</span><span class="o">);</span>
</span><span class='line'>                   <span class="k">break</span><span class="o">;</span>
</span><span class='line'>               <span class="k">case</span> <span class="sc">&#39;t&#39;</span><span class="o">:</span>
</span><span class='line'>                   <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\t&#39;</span><span class="o">);</span>
</span><span class='line'>                   <span class="k">break</span><span class="o">;</span>
</span><span class='line'>               <span class="k">case</span> <span class="sc">&#39;n&#39;</span><span class="o">:</span>
</span><span class='line'>                   <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\n&#39;</span><span class="o">);</span>
</span><span class='line'>                   <span class="k">break</span><span class="o">;</span>
</span><span class='line'>               <span class="k">case</span> <span class="sc">&#39;b&#39;</span><span class="o">:</span>
</span><span class='line'>                   <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\b&#39;</span><span class="o">);</span>
</span><span class='line'>                   <span class="k">break</span><span class="o">;</span>
</span><span class='line'>               <span class="k">case</span> <span class="sc">&#39;u&#39;</span><span class="o">:</span>
</span><span class='line'>                   <span class="o">{</span>
</span><span class='line'>                       <span class="c1">// uh-oh, we&#39;re in unicode country....</span>
</span><span class='line'>                       <span class="n">inUnicode</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                       <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                   <span class="o">}</span>
</span><span class='line'>               <span class="k">default</span> <span class="o">:</span>
</span><span class='line'>                   <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
</span><span class='line'>                   <span class="k">break</span><span class="o">;</span>
</span><span class='line'>           <span class="o">}</span>
</span><span class='line'>           <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">ch</span> <span class="o">==</span> <span class="sc">&#39;\\&#39;</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>           <span class="n">hadSlash</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>           <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>       <span class="o">}</span>
</span><span class='line'>       <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">ch</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">(</span><span class="n">hadSlash</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>       <span class="c1">// then we&#39;re in the weird case of a \ at the end of the</span>
</span><span class='line'>       <span class="c1">// string, let&#39;s output it anyway.</span>
</span><span class='line'>       <span class="n">strout</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="sc">&#39;\\&#39;</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="k">new</span> <span class="nf">String</span><span class="o">(</span><span class="n">strout</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>接收时的转码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">setSerialDataToTextView</span><span class="o">(</span><span class="kt">int</span> <span class="n">disp</span><span class="o">,</span> <span class="kt">byte</span><span class="o">[]</span> <span class="n">rbuf</span><span class="o">,</span> <span class="kt">int</span> <span class="n">len</span><span class="o">,</span> <span class="n">String</span> <span class="n">sCr</span><span class="o">,</span> <span class="n">String</span> <span class="n">sLf</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">len</span><span class="o">;</span> <span class="o">++</span><span class="n">i</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">mText</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="n">rbuf</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>正主</h2>

<p>其实最后在各种测试的时候没有用Google的这个原始流程，在网上发现了一份比较完整的USB通讯示例流程-<a href="https://github.com/ksksue/Android-USB-Serial-Monitor-Lite">Android-USB-Serial-Monitor-Lite</a>，直接用它提供的各种工具做的测试&hellip;我的测试代码在这里<a href="https://github.com/wanax/android_usb_test">android_usb_test</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UNIX下的Socket通信-TCP/IP基本概念]]></title>
    <link href="http://sonnewilling.com/blog/2014/03/20/unixxia-de-sockettong-xin-tcp-slash-ipji-ben-gai-nian/"/>
    <updated>2014-03-20T18:44:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2014/03/20/unixxia-de-sockettong-xin-tcp-slash-ipji-ben-gai-nian</id>
    <content type="html"><![CDATA[<h2>总览</h2>

<blockquote><p>All problems in computer science can be solved by another level of indirection</p></blockquote>

<p>觉得这句话对TCP的分层也很适用。</p>

<p>对TCP/IP协议来说，大体分为五层，</p>

<ol>
<li>应用层</li>
<li>传输层</li>
<li>网络层</li>
<li>链路层</li>
<li>物理层</li>
</ol>


<p>应用层我们接触的比较多，流行的如HTTP，FTP之类都算，像我在大学里做的PHP开发时基本对HTTP发包没有任何概念，照着教程开eclipse，apache，在浏览器里敲个<code>locahost:8080</code>出来个猫的图案就很开心了。再建个index，上面写句“未满18周岁禁止进入”，就有种天下在手的感觉。</p>

<!--more-->


<p>后来做java网站，用到了HttpClient，逐渐对HTTP的抓包发包有了简单地了解。通过这玩意儿就可以做到绕过网页填写，直接后台模拟网页提交表单，那些抢票软件大体上就是这个思路。</p>

<p>再往下便是闻名已久的传输层（TCP,UPD,SCTP etc.）与网络层(IPv4,IPv6 etc.)了。</p>

<h2>网络的划分</h2>

<p><img src="http://sonnewilling.com/images/tec/Socket/hierarchy.png" alt="image" /></p>

<p>通过上图可以很直观的看到应用层的实体数据经过层层的包装最终封印在了链路层中在物理层中进行传输。其中每一层实体间交换的单位信息称为<em>协议数据单元(protocol data unit,PDU)</em>。每层的PDU作为下层的<em>数据服务单元（service data unit,SDU）</em>传递给下层，并由下层间接完成本层的PDU交换。</p>

<p>为了避免诸如TCP的PDU，IP的PDU这类很不简洁的称呼，国际上给每层的PDU都另外取了自己的名字。传输层的称为<em>segment（分节）</em>，网络层的称为<em>IP datagram（IP数据报）</em>，链路层的称为<em>frame（帧）</em></p>

<p>而关于层与层间的打包封印也有它们不得不说的故事，那就是分片。简单的说如果本层PDU的大小超过紧邻下层的最大SDU限制，那么本层还要事先把PDU划分成若干个合适的片段让下层分开载送，再在相反方向把这些片段重组成PDU。同一层内SDU作为PDU的净荷（payload）字段出现，因此可以说上层PDU作为本层的SDU字段由本层PDU承载。如上图所示每层PDU除用于承载紧邻上层的PDU（即承载数据外），也用于承载本层协议内部通讯所需的控制信息（各种header）。</p>

<p>当然这只是个初步的说法，下面会针对传输层与网络层展开具体一下的学习。</p>

<h3>1.传输层</h3>

<p>一说传输层TCP，讲不通三次握手连接，四次握手关闭都不好意思出来混。</p>

<h4>先看连接图示：</h4>

<p><img src="http://sonnewilling.com/images/tec/Socket/connect.JPG" alt="image" /></p>

<p>图中有类似于SYN，ACK的标记量，结合上一章的内容，其实这也是TCP分节的一种。分节除了用于承载数据外，也用于建立连接（SYN分节），终止连接（FIN分节），中止连接（RST分节），确认数据接收（ACK分节），刷送待发数据（PSH分节）和携带紧急数据指针（URG分节），而且这些功能（包括承载数据）可以灵活组合。</p>

<p>也就是说在建立连接的初期，由Socket自带的函数为我们发送分节握手沟通，握手连接建立后，则由用户自行组织分节信息进行通信。</p>

<p>关于上图的握手过程可以简单复述一下：</p>

<ol>
<li>服务器必须准备好接受外来的连接，这通常通过调用<code>socket</code>,<code>bind</code>,<code>listen</code>这三个函数来完成，称之为<em>被动打开（passive open）</em>。</li>
<li>客户通过调用<code>connect</code>发起<em>主动打开（active open）</em>。这导致客户TCP发送一个SYN（同步）分节，它告诉服务器客户将在（待建立的）连接中发送的数据的初始序列号。通常SYN分节不携带数据，其所在IP数据报只含有一个IP首部，一个TCP首部及可能有的TCP选项。</li>
<li>服务器必须确认（ACK）客户的SYN，同时自己也得发送一个SYN分节，它含有服务器将在同一连接中发送的数据的初始序列号。服务器在单个分节中发送SYN和对客户SYN的ACK。</li>
<li>客户必须确认服务器的SYN。</li>
</ol>


<p>上述过程中出现了<em>SYN_SENT</em>之类的字样，它们代表了套接字的状态。在<code>socket</code>函数初始化后套接字的状态为<em>CLOSED</em>，<code>connect</code>函数导致当前套接字从<em>CLOSED</em>状态转移到<em>SYN_SENT</em>状态，若成功则在转移到<em>ESTABLISHED</em>状态。<em>若<code>connect</code>失败则该套接字不再可用，必须关闭，不可以对这样的套接字再次调用<code>connect</code>函数，而是在每次失败后，必须<code>close</code>当前的套接字描述符并重新调用<code>socket</code></em>。</p>

<h4>再来个关闭图示：</h4>

<p><img src="http://sonnewilling.com/images/tec/Socket/close.JPG" alt="image" /></p>

<ol>
<li>某个应用进程首先调用<code>close</code>，称该端执行<em>主动关闭（active close）</em>，该端的TCP于是发送一个FIN终止分节，表示数据发送完毕。</li>
<li>接收到这个FIN对端执行<em>被动关闭（passive close）</em>。这个FIN由TCP确认。它的接收也作为一个<em>文件结束符（end-of-file）</em>传递给接收端应用进程（放在已排队等候该应用进程接收的任何其它数据之后），因为FIN的接收意味着接收端应用进程在相应连接上再无额外的数据可接收。</li>
<li>一段时间后，接收到这个文件结束符的应用进程将调用<code>close</code>关闭它的套接字。这导致了它的TCP也发送一个FIN。</li>
<li>接收这个最终FIN的原发送端TCP（即执行主动关闭的那一端）确认这个FIN。</li>
</ol>


<p>在握手连接的过程中，套接字通过发送SYN（建立连接分节）经历了COLSE，SYN_SENT，ESTABLISHED等状态，达到了可以通信的目的。而在四次关闭握手连接中，套接字也要经历几种状态，达到真正关闭的目的，<em>需要注意的是，因为TCP是全双工的，所以正常情况下的关闭需要经过双方的确认才可以完全关闭，这就需要通信两端都分别发送自己的FIN信号，且回应对方的FIN，因此理论上关闭握手需要四次，每个套接字各两次。</em></p>

<ol>
<li>FIN_WAIT_1：<em>主动方</em>套接字在ESTABLISHED状态正常通信时，它想主动关闭连接，于是向对方发送了FIN报文，此时该套接字即进入到FIN_WAIT_1状态。而当对方回应ACK报文后，则进入到FIN_WAIT_2状态。</li>
<li>FIN_WAIT_2：<em>主动方</em>通俗的讲便是我已经完成任务并且告知对端完成我方的关闭，然后我在等你发送你的FIN，要是你还有什么话说那赶紧，我这边该说的都说完了&hellip;</li>
<li>CLOSE_WAIT：<em>被动方</em>对应的是FIN_WAIT_2状态，便是在正常ESTABLISHED状态下收到了对端的FIN信号，但我还有活没做完，需要搞定后才往你那儿发送FIN终止信号，此时的状态便是CLOSE_WAIT。</li>
<li>LAST_ACK：<em>被动方</em>被动关闭一方在发送FIN报文后，最后等待对方的ACK报文。</li>
<li>TIME_WAIT：<em>主动方</em>表示收到了对方的FIN报文，并发送出了ACK报文，就等2MSL后即可回到CLOSED可用状态了。如果FIN_WAIT_1状态下，收到了对方同时带 FIN标志和ACK标志的报文时，可以直接进入到TIME_WAIT状态，而无须经过FIN_WAIT_2状态。</li>
</ol>


<p>在这些状态中，比较不好理解的是TIME_WAIT状态。我们看到执行主动关闭的一方经历了这个状态。该端点停留在这个状态的持续时间是<em>最长分节生命期（maximum segment lifetime，MSL）</em>的两倍，有时候称之为2MSL。</p>

<p>任何TCP实现都必须为MSL选择一个值。其时间在1分钟到4分钟之间。MSL是任何IP数据报能够在因特网中存活的最长时间。因为每个数据报含有一个称为<em>跳限（hop limit）</em>的8位字段，它的最大值为255.一般上假设：</p>

<blockquote><p>具有最大跳限（255）的分组在网络中存在的时间不可能超过MSL秒。</p></blockquote>

<p>所以TIME_WAIT状态有两个存在的理由，</p>

<ol>
<li>可靠地实现TCP全双工连接的终止。TCP连接在主动关闭方发送的最后一个ACK(FIN)，有可能丢失，这时被动方会重新发FIN, 如果这时主动方处于CLOSED状态 ，就会响应RST而不是ACK。所以主动方要处于TIME_WAIT状态，而不能是CLOSED。</li>
<li>允许老的重复分节在网络中消逝，因为经过2MSL，上一次连接中所有的重复包都会消失。</li>
</ol>


<p>最后放一张TCP中套接字的状态大图~</p>

<p><img src="http://sonnewilling.com/images/tec/Socket/status.png" alt="image" /></p>

<h3>2.网络层</h3>

<p>因为主体是使用TCP的Socket进行编程，这里对网络层的具体细节就不做探讨了。但关于网络层还会牵扯到分片的问题，这里需要重视起来。</p>

<p>在TCP传输层中，发送端TCP把来自应用进程的字节流数据（即由应用进程通过一次次输出操作写出到发送端TCP套接字中的数据）按顺序经分割后封装在各个分节中传送给接收端TCP，其中每个分节所封装的数据既可能是发送端应用进程单次输出操作的结果，也可能是数次输出操作的结果，而且每个分节所封装的单次输出操作的结果或者首尾两次输出操作的结果既可能是完整的，也可能是不完整的，具体取决于可在连接建立阶段由对端通告的<em>最大分节大小（maximum segment size,MSS）</em>以及<em>外出接口的最大传输单元（maximum transmission unit,MTU）</em>或<em>外出路径的路径MTU</em>。</p>

<p>MSS的目的是告诉对端其重组缓冲区大小的实际值，从而试图避免分片。MSS经常设置成MTU减去IP和TCP首部的固定长度。</p>

<p>网络层实体间交换的PDU称为IP数据报（IP datagram）,其长度有限：IPv4数据报最大长度65535字节，IPv6S数据报最大65575.发送端IP把来自传输层的消息（或TCP分节）整个封装在IP数据报中发送。链路层实体间交换的PDU称为帧（frame），其长度取决于具体的接口。IP数据报由IP首部和所承载的传输层数据（即网络层的SDU）构成。过长的IP数据报无法封装在单个帧中，需要先对其SDU进行分片（fragmentation），再把分成的各个片段（fragment）冠以新的IP首部封装到多个帧中。在一个IP数据报从源端到目的端的传送过程中，分片操作既可能发生在源端，也可能发生在途中，而其逆操作即重组（reassembly）一般只发生在目的端。</p>

<p>TCP/IP协议族为提高效率会尽可能避免IP的分片/重组操作：TCP根据MSS和MTU限定每个分节的大小，且在途中尽量避免分片操作。不论是否分片都由IP作为链路层的SDU传入链路层，并由链路层封装在帧中数据称为分组（packet，俗称包）。可见一个分组既可能是一个完整地IP数据报，也可能是某个IP数据报的SDU的一个片段被冠以新的IP首部后的结果。</p>

<h2>下一步</h2>

<p>总结了基本套接字函数的使用与TCP/IP的简单概念，下一步将会着手编写一套客户/服务器的通信演示Demo，会考虑实现线程池来提高并发效率。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UNIX下的Socket通信-Socket的连接]]></title>
    <link href="http://sonnewilling.com/blog/2014/03/20/unixxia-de-sockettong-xin-Socket-de-lian-jie/"/>
    <updated>2014-03-20T15:55:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2014/03/20/unixxia-de-sockettong-xin-Socket-de-lian-jie</id>
    <content type="html"><![CDATA[<h2>一.关于Socket</h2>

<p>如我，刚见这个名词的时候不知所云，因为起点就没找对，首先要在基于对UNIX有所了解的情况下才利于开展工作，便是“一切皆文件”。</p>

<p>在UNIX下，一般的文件可以通过open打开，并返回一个小整数作为标记，后续的操作便是针对这个小整数进行读写。这个小整数被称作<em>描述符</em>，描述符只是引用file的proc结构中一个数组的某个元素的下标而已，它可以代表该文件，但并不是文件本身，我们通过它来与文件建立联系，方便操作。</p>

<p>以此为前提，Socket便是一种特殊的文件，通过<em>socket</em>函数可以创建一个套接字（特殊的文件），它也返回给我们一个小整数，以后所有的函数调用就用该描述符来标示这个套接字。</p>

<p>在UNIX下文件的种类有很多，打开与使用的方式虽然遵循着一定的模式，但也不尽相同。比如想打开一个文本文件需要借助open函数，而且在打开的时候需要告诉open函数该文本的路径位置，以明确打开的目标。</p>

<!--more-->


<p>Socket的打开也与之相似，因为它一定程度上可以理解为是一个联网通信的文件，所以如果想要明确打开的目标，肯定不能传送一个本地路径，而要与之相符地传送一个目标IP地址。当然这只是简单的比喻，Socket的建立要比文件要复杂一些，IP地址的设置只是打开过程的一个步骤，因为涉及到了网络的缘故，还需要设置很多参数。毕竟文本文件是自己的，打开的标准关上门来自己做主，怎么方便都好商量。而Socket则不一样，既然是在各种主机间通信，且走的路线均不一样，这就牵扯到了各种配置。</p>

<h2>二.TCP下IPv4的Socket连接</h2>

<h3>1.socket</h3>

<p>让我们来看Socket建立的第一步的函数</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">socket</span><span class="p">(</span><span class="kt">int</span> <span class="n">family</span><span class="p">,</span> <span class="kt">int</span> <span class="n">type</span><span class="p">,</span> <span class="kt">int</span> <span class="n">protocol</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>明显的，单是第一步就比open函数多参数。</p>

<p>其中family参数指明协议族，type指明套接字类型，protocol为某个协议的常值类型，或者设为0。</p>

<h4>socket函数的type常值</h4>

<table>
<thead>
<tr>
<th></th>
<th>       type          </th>
<th>        说明         </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> SOCK_STREAM    </td>
<td>    字节流套接字   </td>
</tr>
<tr>
<td></td>
<td> SOCK_DGRAM     </td>
<td>     数据报套接字  </td>
</tr>
<tr>
<td></td>
<td>SOCK_SEQPACKET  </td>
<td>    有序分组套接字 </td>
</tr>
<tr>
<td></td>
<td>   SOCK_RAW     </td>
<td>     原始套接字   </td>
</tr>
</tbody>
</table>


<h4>socket函数protocol常值</h4>

<table>
<thead>
<tr>
<th></th>
<th>    protocol     </th>
<th>        说明         </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td> IPPROTO_TCP    </td>
<td>    TCP传输协议   </td>
</tr>
<tr>
<td></td>
<td> IPPROTO_UDP    </td>
<td>     UDP传输协议  </td>
</tr>
<tr>
<td></td>
<td> IPPROTO_SCTP   </td>
<td>    SCTP传输协议  </td>
</tr>
</tbody>
</table>


<p>所以如果</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>则表示socket函数创建一个网际（AF_INET）字节流（SOCK_STREAM）套接字。</p>

<h3>2.connect</h3>

<p>第一步的socket函数只是把一些基本的参数设置好并返回了一个描述符，就像安好了电话，但其实并没有开始扯线连接，connect帮我们搞定这一步。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">connect</span><span class="p">(</span><span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="k">const</span> <span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="n">servaddr</span><span class="p">,</span> <span class="n">socklen_t</span> <span class="n">addrlen</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>socket是由socket返回的套接字描述符，第二个，第三个参数分别是一个指向套接字地址结构的指针和该结构的大小。套接字地址结构必须含有服务器的IP地址和端口号。</p>

<p>关于sockaddr的结构大体如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sa_family_t</span>    <span class="n">sin_family</span><span class="p">;</span> <span class="cm">/* address family: AF_INET */</span>
</span><span class='line'>    <span class="n">in_port_t</span>      <span class="n">sin_port</span><span class="p">;</span>   <span class="cm">/* port in network byte order */</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">in_addr</span> <span class="n">sin_addr</span><span class="p">;</span>   <span class="cm">/* internet address */</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>对此结构一般的设置方法如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
</span><span class='line'><span class="n">servaddr</span><span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'><span class="n">servaddr</span><span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">13</span><span class="p">);</span><span class="c1">//服务器端口</span>
</span><span class='line'><span class="n">inet_pton</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="s">&quot;192.168.105.105&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">servaddr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">);</span><span class="c1">//服务器地址</span>
</span></code></pre></td></tr></table></div></figure>


<p>因为具体的连接动作是使用网络字节序的，并不是我们所见到的诸如<code>192.168.105.105:13</code>之类的表达，所以需要htons与inet_pton进行相应的转换。<em>htons()主机到网络短整数，转换二进制端口号</em>，地址转换函数在地址的文本表达式和它们存放在套接字地址结构中的二进制值之间转换。</p>

<p>如果是写一个客户端的请求程序，那么前两个函数就可以满足要求建立了套接字，下一步的动作便是针对该套接字返回的描述符进行相应的读写便可以了。但要是想做一个服务器端的进程具有监听功能的话则还需要另外下面这三个函数。</p>

<h3>3.bind，listen，accept</h3>

<blockquote><p>打个简单的比喻，建立TCP连接就好比一个电话系统。socket函数等同于有电话可用。connect要求我们知道对方的电话号码并拨打它。bind函数是在告诉别人你的电话号码，这样他们可以呼叫你。listen是打开电话振铃，这样当有个外来呼叫到来时，你可以听到。accept则相当于接电话。</p></blockquote>

<p>对于服务器端的socket addr的初始化如下</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">bzero</span><span class="p">(</span><span class="o">&amp;</span><span class="n">servaddr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">servaddr</span><span class="p">));</span>
</span><span class='line'><span class="n">servaddr</span><span class="p">.</span><span class="n">sin_family</span>      <span class="o">=</span> <span class="n">AF_INET</span><span class="p">;</span>
</span><span class='line'><span class="n">servaddr</span><span class="p">.</span><span class="n">sin_port</span>        <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="n">SERV_PORT</span><span class="p">);</span>
</span><span class='line'><span class="n">servaddr</span><span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">htonl</span><span class="p">(</span><span class="n">INADDR_ANY</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>它区别于客户端的套接字初始化在于第四行，并没有指定目标IP地址，代之的是一个INADDR_ANY的宏，它可以表示我接收来自任何地址的请求。
如果想要真正实现这一目的，我们需要调用bind来告知UNIX系统我这个套接字将被用来接收信号：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">bind</span><span class="p">(</span><span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="k">const</span> <span class="n">stuct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="n">myaddr</span><span class="p">,</span> <span class="n">socklen_t</span> <span class="n">addrlen</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>继而取消电话的静音状态：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">listen</span><span class="p">(</span><span class="kt">int</span> <span class="n">sockfd</span><span class="p">,</span> <span class="kt">int</span> <span class="n">backlog</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>此函数通常应该在调用socket和bind这两个函数之后，并在调用accept之前调用。</p>

<p>关于backlog，是一个设置未完成连接队列与已完成连接队列的参数，这里暂不做细致的探讨了。</p>

<p>最后一步，我们的进程将阻塞于accept的调用中。accept函数由TCP服务器调用，用于从已完成的连接队列头返回下一个已完成连接。关于阻塞函数，看下面这段的讲解：</p>

<blockquote><p>永远阻塞的系统调用是指调用有可能永远无法返回，也可称为慢系统调用（slow system call），多数网络支持函数都属于这一种（accept）。适用于慢系统调用的基本规则是，当阻塞于某个慢系统调用的一个进程捕获某个信号且相应信号处理函数返回时，该系统调用可能返回一个EINTR错误。</p></blockquote>

<p>对于此类错误我们可以通过以下函数进行绕过，</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span> <span class="p">(</span> <span class="p">;</span> <span class="p">;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">clilen</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">cliaddr</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="n">connfd</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">listenfd</span><span class="p">,</span> <span class="p">(</span><span class="n">SA</span> <span class="o">*</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">cliaddr</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">clilen</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="n">errno</span> <span class="o">==</span> <span class="n">EINTR</span><span class="p">)</span>
</span><span class='line'>              <span class="k">continue</span><span class="p">;</span>     <span class="cm">/* back to for() */</span>
</span><span class='line'>          <span class="k">else</span>
</span><span class='line'>              <span class="nf">err_sys</span><span class="p">(</span><span class="s">&quot;accept error&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上便是一个服务器端的监听套接字的建立过程。</p>

<h3>4.close，shutdown</h3>

<p>有开就有关，关于套接字的关闭我们一般使用close与shutdown来进行控制。</p>

<p>正如我们前面所述，我们通过描述符对套接字进行操作，描述符不过是对file的一个下标而已，如果有多个进程同时使用描述符，则均可以表示为对此file的一个引用。初始的引用值为1，每当调用fork以派生子进程或对打开操作返回的描述符（或其复制品）调用dup以复制描述符时，该file结构的引用计数就递增。相应的close()使相应描述符的引用计数减1，当该描述符引用计数为0时则引发正常TCP连接终止序列：每个方向上发送一个FIN，每个FIN又由各自的对端确认。如想确实在某个TCP连接上发送FIN，可以改用shutdown。</p>

<h3>5.最后无图无真相:</h3>

<p><img src="http://sonnewilling.com/images/tec/Socket/funtime.jpg" alt="image" /></p>

<h2>下一步</h2>

<p>这部分具体介绍了Socket的基本概念与一个客户端和服务端的套接字是怎样一步步建立起来的。但文章中也出现了一些诸如FIN之类的关键字并没有进行详细的解释，在下一章，我会对TCP/IP的一些基本概念进行解释。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GLib编译笔记]]></title>
    <link href="http://sonnewilling.com/blog/2014/03/13/glibbian-yi-bi-ji/"/>
    <updated>2014-03-13T15:38:00+08:00</updated>
    <id>http://sonnewilling.com/blog/2014/03/13/glibbian-yi-bi-ji</id>
    <content type="html"><![CDATA[<h3>缘起</h3>

<p>最近做的一个项目是使用C写的，随着项目的深入发现需要通过不同的数据结构来完成需求，自己简单地去编写已经不能满足要求且在健壮性方面也存在着隐患，于是就琢磨着在网上找找看看有没有什么现成的C工具包来用，就这样，发现了GLib。</p>

<p>先来看下维基上的介绍：</p>

<blockquote><p>GLib是一个跨平台的、用C语言编写的库，起初是GTK+的一部分，但到了GTK+第二版，开发者决定把跟图形界面无关的代码分开，这些代码于是就组装成了GLib。GLib提供了多种高级的数据结构，如内存块、双向和单向链表、哈希表、动态字符串等。</p></blockquote>

<p>感觉功能刚好满足需要，类似于C++中的STL，果断搞起。</p>

<!--more-->


<h3>1.下载</h3>

<p>从网上搜索GLib找到了这里<a href="http://www.linuxfromscratch.org/blfs/view/svn/general/glib2.html">Linux From Scratch</a>，下载它的压缩包。</p>

<p>这个网站也把具体的编译安装方式写得很明白。</p>

<blockquote><h3>GLib Dependencies</h3>

<h4>Required</h4>

<p><a href="http://www.linuxfromscratch.org/blfs/view/svn/general/libffi.html">libffi-3.0.13</a> and <a href="http://www.linuxfromscratch.org/blfs/view/svn/general/python2.html">Python-2.7.6</a></p>

<h4>Recommended</h4>

<p><a href="http://www.linuxfromscratch.org/blfs/view/svn/general/pcre.html">PCRE-8.34</a>(built with Unicode properties)</p>

<h4>Optional</h4>

<p><a href="http://www.linuxfromscratch.org/blfs/view/svn/postlfs/attr.html">attr-2.4.47</a>, <a href="http://www.linuxfromscratch.org/blfs/view/svn/general/dbus.html">D-Bus-1.8.0</a> (required to run the tests), and <a href="http://www.linuxfromscratch.org/blfs/view/svn/general/gtk-doc.html">GTK-Doc-1.20</a></p>

<h4>Additional Runtime Dependencies</h4>

<p>Quoted directly from the INSTALL file: “Some of the mimetype-related functionality in GIO requires the update-mime-database and update-desktop-database utilities”, which are part of <a href="http://www.linuxfromscratch.org/blfs/view/svn/general/shared-mime-info.html">shared-mime-info-1.2</a> and <a href="http://www.linuxfromscratch.org/blfs/view/svn/general/desktop-file-utils.html">desktop-file-utils-0.22</a>, respectively.</p></blockquote>

<p>就是说想要安装GLib的话最起码得先把Required和Recommended里的东西装完才行。</p>

<p>但在实际安装过程中还需要另外两个工具<a href="http://www.chenjunlu.com/2011/03/understanding-pkg-config-tool/">pkg-config</a>和<a href="http://zh.wikipedia.org/wiki/Gettext">Gettext</a></p>

<p>对于两者皆是去官网下载最新版本的安装包，执行安装命令就可以了。</p>

<p><a href="http://pkgconfig.freedesktop.org/releases/">pkg-config</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">configure</span>  <span class="o">--</span><span class="n">with</span><span class="o">-</span><span class="n">internal</span><span class="o">-</span><span class="n">glib</span>
</span><span class='line'><span class="n">make</span>
</span><span class='line'><span class="n">sudo</span>  <span class="n">make</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://www.gnu.org/software/gettext/">Gettext</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="p">.</span><span class="o">/</span><span class="n">configure</span>
</span><span class='line'><span class="err">$</span> <span class="n">make</span>
</span><span class='line'><span class="err">$</span> <span class="n">make</span> <span class="n">verify</span>   <span class="err">#</span> <span class="p">(</span><span class="n">optional</span><span class="p">)</span>
</span><span class='line'><span class="err">$</span> <span class="n">sudo</span> <span class="n">make</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.编译</h3>

<p>安装环境配好后就可以正式安装了，顺着那个网页往下走就能看到具体的方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">configure</span> <span class="o">--</span><span class="n">prefix</span><span class="o">=/</span><span class="n">usr</span> <span class="o">--</span><span class="n">with</span><span class="o">-</span><span class="n">pcre</span><span class="o">=</span><span class="n">system</span> <span class="o">&amp;&amp;</span> <span class="n">make</span>
</span></code></pre></td></tr></table></div></figure>


<p>再然后</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">sudo</span> <span class="n">make</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>GLib在gcc里的使用是借助了一个叫pkg-configure的工具，这玩意儿的作用这位哥儿们说得很详细了，看他的介绍吧：<a href="http://www.chenjunlu.com/2011/03/understanding-pkg-config-tool/">理解 pkg-config 工具</a></p>

<p>其实定位到<code>/usr/lib/pkgconfigure</code>后会发现它里面放了很多你自己安装的库的.pc的配置文件，用vim随便打开一个发现它的内容是这样的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>   <span class="n">prefix</span><span class="o">=/</span><span class="n">usr</span>
</span><span class='line'>   <span class="n">exec_prefix</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">prefix</span><span class="p">}</span>
</span><span class='line'>   <span class="n">libdir</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">exec_prefix</span><span class="p">}</span><span class="o">/</span><span class="n">lib</span>
</span><span class='line'>   <span class="n">includedir</span><span class="o">=</span><span class="err">$</span><span class="p">{</span><span class="n">prefix</span><span class="p">}</span><span class="o">/</span><span class="n">include</span>
</span><span class='line'><span class="o">&amp;</span>
</span><span class='line'>   <span class="n">glib_genmarshal</span><span class="o">=</span><span class="n">glib</span><span class="o">-</span><span class="n">genmarshal</span>
</span><span class='line'>   <span class="n">gobject_query</span><span class="o">=</span><span class="n">gobject</span><span class="o">-</span><span class="n">query</span>
</span><span class='line'>   <span class="n">glib_mkenums</span><span class="o">=</span><span class="n">glib</span><span class="o">-</span><span class="n">mkenums</span>
</span><span class='line'><span class="o">&amp;</span>
</span><span class='line'>   <span class="nl">Name:</span> <span class="n">GLib</span>
</span><span class='line'>   <span class="nl">Description:</span> <span class="n">C</span> <span class="n">Utility</span> <span class="n">Library</span>
</span><span class='line'>   <span class="nl">Version:</span> <span class="mf">2.38.2</span>
</span><span class='line'>   <span class="n">Requires</span><span class="p">.</span><span class="n">private</span><span class="o">:</span> <span class="n">libpcre</span>
</span><span class='line'>   <span class="nl">Libs:</span> <span class="o">-</span><span class="n">L</span><span class="err">$</span><span class="p">{</span><span class="n">libdir</span><span class="p">}</span> <span class="o">-</span><span class="n">lglib</span><span class="o">-</span><span class="mf">2.0</span> <span class="o">-</span><span class="n">lintl</span>
</span><span class='line'>   <span class="n">Libs</span><span class="p">.</span><span class="n">private</span><span class="o">:</span>   <span class="o">-</span><span class="n">lpcre</span>  <span class="o">-</span><span class="n">lintl</span>  <span class="o">-</span><span class="n">liconv</span>
</span><span class='line'>   <span class="nl">Cflags:</span> <span class="o">-</span><span class="n">I</span><span class="err">$</span><span class="p">{</span><span class="n">includedir</span><span class="p">}</span><span class="o">/</span><span class="n">glib</span><span class="o">-</span><span class="mf">2.0</span> <span class="o">-</span><span class="n">I</span><span class="err">$</span><span class="p">{</span><span class="n">libdir</span><span class="p">}</span><span class="o">/</span><span class="n">glib</span><span class="o">-</span><span class="mf">2.0</span><span class="o">/</span><span class="n">include</span>
</span></code></pre></td></tr></table></div></figure>


<p>看一下就明白了，基本上就是帮你写了一堆编译选项，免得到时候自己编译的时候要敲一坨，而且在不同的电脑上编译的时候也可以动态的调整路径，不用一遍遍的去改Makefile。</p>

<p>比如说自己编译一个使用了GLib的文件，可以这样敲：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gcc</span> <span class="err">`</span><span class="n">pkg</span><span class="o">-</span><span class="n">config</span> <span class="o">--</span><span class="n">cflags</span> <span class="o">--</span><span class="n">libs</span> <span class="n">glib</span><span class="o">-</span><span class="mf">2.0</span><span class="err">`</span>  <span class="n">hello</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">hello</span>
</span></code></pre></td></tr></table></div></figure>


<p>–cflags 参数可以给出在编译时所需要的选项，而 –libs 参数可以给出连接时的选项。</p>

<p>当然如果不使用pkg-configure的话也可以类似这样子：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">gcc</span>  <span class="o">-</span><span class="n">L</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span> <span class="o">-</span><span class="n">I</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">glib</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">glib</span><span class="o">-</span><span class="mf">2.0</span> <span class="n">hello</span><span class="p">.</span><span class="n">c</span> <span class="o">-</span><span class="n">o</span> <span class="n">hello</span> <span class="o">-</span><span class="n">liconv</span> <span class="o">-</span><span class="n">lresolv</span> <span class="o">-</span><span class="n">lpcre</span> <span class="o">-</span><span class="n">lintl</span> <span class="o">-</span><span class="n">lglib</span><span class="o">-</span><span class="mf">2.0</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以基本上还是简化了很多操作的。</p>

<h3>3.测试使用</h3>

<p>测试一下GLib中哈希表的使用吧：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;glib.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Glib version: %u.%u.%u</span><span class="se">\n\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">glib_major_version</span><span class="p">,</span><span class="n">glib_minor_version</span><span class="p">,</span><span class="n">glib_micro_version</span><span class="p">);</span>
</span><span class='line'><span class="o">&amp;</span>
</span><span class='line'>      <span class="n">GHashTable</span><span class="o">*</span> <span class="n">hash</span> <span class="o">=</span> <span class="n">g_hash_table_new</span><span class="p">(</span><span class="n">g_str_hash</span><span class="p">,</span> <span class="n">g_str_equal</span><span class="p">);</span>
</span><span class='line'>      <span class="n">g_hash_table_insert</span><span class="p">(</span><span class="n">hash</span><span class="p">,</span> <span class="s">&quot;Virginia&quot;</span><span class="p">,</span> <span class="s">&quot;Richmond&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">g_hash_table_insert</span><span class="p">(</span><span class="n">hash</span><span class="p">,</span> <span class="s">&quot;Texas&quot;</span><span class="p">,</span> <span class="s">&quot;Austin&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">g_hash_table_insert</span><span class="p">(</span><span class="n">hash</span><span class="p">,</span> <span class="s">&quot;Ohio&quot;</span><span class="p">,</span> <span class="s">&quot;Columbus&quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&amp;</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;There are %d keys in the hash</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">g_hash_table_size</span><span class="p">(</span><span class="n">hash</span><span class="p">));</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;The capital of Texas is %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">g_hash_table_lookup</span><span class="p">(</span><span class="n">hash</span><span class="p">,</span> <span class="s">&quot;Texas&quot;</span><span class="p">));</span>
</span><span class='line'>      <span class="n">gboolean</span> <span class="n">found</span> <span class="o">=</span> <span class="n">g_hash_table_remove</span><span class="p">(</span><span class="n">hash</span><span class="p">,</span> <span class="s">&quot;Virginia&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;The value &#39;Virginia&#39; was %sfound and removed</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">found</span> <span class="o">?</span> <span class="s">&quot;&quot;</span> <span class="o">:</span> <span class="s">&quot;not &quot;</span><span class="p">);</span>
</span><span class='line'><span class="o">&amp;</span>
</span><span class='line'>      <span class="n">g_hash_table_destroy</span><span class="p">(</span><span class="n">hash</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以打印如下信息：</p>

<blockquote><p>Glib version: 2.38.2</p>

<p>There are 3 keys in the hash</p>

<p>The capital of Texas is Austin</p>

<p>The value &lsquo;Virginia&rsquo; was found and removed</p></blockquote>

<h3>4.搭配Eclipse</h3>

<p>嫌敲命令行麻烦的话也可以配到Eclipse上用。现在在Eclipse上有了pkg-configure的插件，可以对GLib直接勾选使用，但我安装后没有起到效果，不知道哪里出了问题<a href="https://code.google.com/p/pkg-config-support-for-eclipse-cdt/">pkg-config-support-for-eclipse-cdt</a>。但反正原理已经知道了，索性自己配一下也就妥了。</p>

<p>选中工程，在Project里找到Properties进入到下图的界面：</p>

<p><img src="http://sonnewilling.com/images/tec/GLib/eclipsecon.png" alt="image" /></p>

<p>在Libraries里配置GLib库的位置和名字，在Includes里配置GLib头文件的位置，我的头文件在这里</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">include</span><span class="o">/</span><span class="n">glib</span><span class="o">-</span><span class="mf">2.0</span>
</span></code></pre></td></tr></table></div></figure>


<p>其实按照教程正常安装的话基本上都会在这个位置，这样的话就可以用Eclipse在GLib里爽起来了~</p>
]]></content>
  </entry>
  
</feed>
